@page "/pa/m6_4c"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Public


@inject PublicService ObjPublicService
@inject ReportService UserlogService
@inject UserServices OpjUserService

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@mMenudesc</MudText>
    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=Export Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error"></MudIconButton>
        </MudTooltip>
    </MudAppBar>
    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?VarGlobals.TableHeight:"")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Class6_4_C,bool>(FilterFunc)"
              @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_4_C, object>(x=>x.Batch_Number)">WAVENO</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_4_C, object>(x=>x.Order_No)">ORDERNO</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_4_C, object>(x=>x.Item_Code)">MATERIALCODE</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_4_C, object>(x=>x.Item_Name)">MATERIALNAME</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_4_C, object>(x=>x.Su_No)">PACKID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_4_C, object>(x=>x.Palletcode)">PALLET</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_4_C, object>(x=>x.Need_Qty)">NEEDQTY</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Class6_4_C, object>(x=>x.Pallet_Qty)">STOCKQTY</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="WAVENO">@context.Batch_Number</MudTd>
            <MudTd DataLabel="ORDERNO">@context.Order_No</MudTd>
            <MudTd DataLabel="MATERIALCODE">@context.Item_Code</MudTd>
            <MudTd DataLabel="MATERIALNAME">@context.Item_Name</MudTd>
            <MudTd DataLabel="PACKID">@context.Su_No</MudTd>
            <MudTd DataLabel="PALLET">@context.Palletcode</MudTd>
            <MudTd DataLabel="NEEDQTY">@string.Format(VarGlobals.FormatN2, context.Need_Qty)</MudTd>
            <MudTd DataLabel="STOCKQTY">@string.Format(VarGlobals.FormatN2, context.Pallet_Qty)</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private string msgAction = "Enter Palletcode";
    private string mMenudesc = "Picking Batch Detail";
    public string mPagedesc { get; set; } = "Picking Batch Detail";
    private string mPagename { get; set; } = "/pa/m6_4c";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Class6_4_C selectedItem = null;
    private HashSet<Class6_4_C> selectedItems = new HashSet<Class6_4_C>();
    private IEnumerable<Class6_4_C> Elements = new List<Class6_4_C>();

    public int elevation = 0;

    protected override async Task OnInitializedAsync()
    {
        PublicService objCS = new PublicService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetAllMenu6_4C());
        this.InsertAuditrial("View", mMenudesc);
    }

    private void setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            mPalletcode = str;
            msgAction = "Enter Pack ID";
            elevation = 3;
        }
        else
        {
            if (str == mPalletcode)
            {
                elevation = 2;
                msgAction = "Mapping successfully";
                //ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
                mPalletcode = "";
            }
            else
            {
                mPackid = str;
                //ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
            }
        }
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue;
            setstr(palletcode);

            palletcode = "";
        }
    }

    private bool FilterFunc(Class6_4_C element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        //if (element.Su_No.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        if (element.Item_Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Item_Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if ($"{element.Create_By}".Contains(searchString))
        //    return true;
        return false;
    }

    public void Dispose()
    {

    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname);
    }

}
