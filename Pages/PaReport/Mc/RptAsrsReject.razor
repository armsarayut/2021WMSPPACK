@page "/5/5_5_xx"

@using GoWMS.Server.Controllers;
@using GoWMS.Server.Models.Wcs;
@using GoWMS.Server.Data;
@using GoWMS.Server.Pdf
@using GoWMS.Server.Reports

@inject WcsService ObjWcsService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject UserServices OpjUserService

@if (Elements != null)
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@mPagecaption</MudText>
    <MudGrid>
        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label="From Date" @bind-Date="fromDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
            <MudItem>
                <MudTimePicker Class="px-2" Label="From Time" @bind-Time="fromTime" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label="To Date" @bind-Date="toDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
            <MudItem>
                <MudTimePicker Class="px-2" Label="To Time" @bind-Time="toTime" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row align-self-end">
            <MudButton OnClick="OnclickSearch" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" Size="Size.Medium">Search</MudButton>
        </MudItem>
    </MudGrid>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=Export Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ? "500px" : "")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered" Striped="@striped" Filter="new Func<Rpt_Ejectgate, bool>(FilterFunc)" Style="width:100%;">
        <ToolBarContent>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>DATETIME</MudTh>
            <MudTh>PALLET</MudTh>
            <MudTh>REASON</MudTh>
            <MudTh>WEIGHT</MudTh>
            <MudTh>SIZE</MudTh>
            <MudTh>GATE</MudTh>
        </HeaderContent>
        <RowTemplate>

            <MudTd DataLabel="DATETIME">@Convert.ToDateTime(context.Created).ToString(VarGlobals.FormatDT)</MudTd>
            <MudTd DataLabel="PALLET">@context.Lpncode</MudTd>
            <MudTd DataLabel="REASON">@context.Msg</MudTd>
            <MudTd DataLabel="WEIGHT">@string.Format(VarGlobals.FormatN2, context.Actual_Weight)</MudTd>
            <MudTd DataLabel="SIZE">@context.Actual_Size</MudTd>
            <MudTd DataLabel="GATE">@context.Work_Gate</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 20, 50, 100 }" />
        </PagerContent>
    </MudTable>


}


@code {
    private string mPagecaption { get; set; } = "ASRS:REJECT";
    private string mPagedesc { get; set; } = "ASRS:REJECT";
    private string mPagename { get; set; } = "/rpt/asrsreject";

    private IEnumerable<Rpt_Ejectgate> Elements = new List<Rpt_Ejectgate>();

    DateTime? fromDate = DateTime.Today;
    TimeSpan? fromTime = DateTime.Now.AddHours(-1).TimeOfDay;
    DateTime? toDate = DateTime.Today;
    TimeSpan? toTime = DateTime.Now.TimeOfDay;



    DateTime? fromDateTime = DateTime.Today;
    DateTime? toDateTime = DateTime.Today.AddDays(1);

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";



    protected override async Task OnInitializedAsync()
    {
        WcsService objCS = new WcsService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));

        fromDateTime = fromDate.Value.Date + fromTime.Value;
        toDateTime = toDate.Value.Date + toTime.Value;


        Elements = await Task.Run(() => objCS.GetReportEject(fromDateTime.Value, toDateTime.Value));
    }

    bool FilterFunc(Rpt_Ejectgate element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Lpncode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void OnclickSearch()
    {
        DbGetData();
        StateHasChanged();
    }

    void DbGetData()
    {
        //timePortionDateTimePicker.Value

        DateTime newDateTimeFM = fromDate.Value.Date + fromTime.Value;
        DateTime newDateTimeTO = toDate.Value.Date + toTime.Value;


        // DateTime newDateTime = fromDate.Value.Date.Add(TimeSpan.Parse(fromTime.Value.ToShortTimeString()));



        Elements = ObjWcsService.GetReportEject(newDateTimeFM, newDateTimeTO);


    }


    public async Task DownloadExcelDocument()
    {
        /*
        try
        {
            AsrsloadtimeRptExcel excelReport = new AsrsloadtimeRptExcel();
            List<AsrsLoadtime> listExcelReport = new List<AsrsLoadtime>();
            listExcelReport = Elements.ToList();
            var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
        */
    }

}
