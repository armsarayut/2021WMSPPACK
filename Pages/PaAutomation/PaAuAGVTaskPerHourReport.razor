@page "/5/5_5_7"
@using System
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Wcs
@using GoWMS.Server.Models.Hagv
@using GoWMS.Server.Reports
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@inject AgvService AgvObjService
@inject UserServices OpjUserService


@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@mPagecaption</MudText>

    <MudGrid>

        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label="FromDate" @bind-Date="fromDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row">
            <MudItem>
                <MudDatePicker Class="" Label="ToDate" @bind-Date="toDate" DateFormat="@VarGlobals.FormatD" />
            </MudItem>
        </MudItem>
        <MudItem Class="d-flex flex-row align-self-end">
            <MudButton Disabled="@_processing" StartIcon="@Icons.Material.Filled.Search" Size="Size.Medium"
                       OnClick="OnclickSearch" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Search</MudText>
                }
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=Export Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

    <MudTable Items="@Elements" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ? "500px" : "")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<RptTaskHourCount, bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<RptTaskHourCount, object>(x=>x.W_hour)">DATETIME</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<RptTaskHourCount, object>(x=>x.W_count)">COUNT</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="DATETIME">@Convert.ToDateTime(context.W_hour).ToString(VarGlobals.FormatDTHM)</MudTd>
            <MudTd DataLabel="COUNT">@context.W_count</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 20, 50, 100 }" />
        </PagerContent>
    </MudTable>
}

@code {
    private string mPagecaption { get; set; } = "5.5.7-AGV-TASKREPORT";
    private string mPagedesc { get; set; } = "5.5.7-AGV-TASKREPORT";
    private string mPagename { get; set; } = "/5/5_5_7";
    private bool _processing = false;

    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private RptTaskHourCount selectedItem = null;
    private HashSet<RptTaskHourCount> selectedItems = new HashSet<RptTaskHourCount>();
    private IEnumerable<RptTaskHourCount> Elements = new List<RptTaskHourCount>();

    public int elevation = 0;

    DateTime? fromDate = DateTime.Today.AddDays(-1);
    TimeSpan? fromTime = DateTime.Now.TimeOfDay;
    DateTime? toDate = DateTime.Today;
    TimeSpan? toTime = DateTime.Now.TimeOfDay;

    DateTime? fromDateTime = DateTime.Today.AddDays(-1);
    DateTime? toDateTime = DateTime.Today;


    protected override async Task OnInitializedAsync()
    {
        AgvService objCS = new AgvService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));

        DateTime newDateTimeFM = fromDate.Value.Date;
        DateTime newDateTimeTO = toDate.Value.Date.AddDays(1);

        Elements = await Task.Run(() => objCS.GetAllReportTaskPerHourAgv().Where(x => x.W_hour >= newDateTimeFM && x.W_hour <= newDateTimeTO));

       
    }

    async Task OnclickSearch()
    {
        _processing = true;
        await DbGetData();
        _processing = false;
        this.StateHasChanged();
    }

    async Task DbGetData()
    {
        DateTime newDateTimeFM = fromDate.Value.Date;
        DateTime newDateTimeTO = toDate.Value.Date.AddDays(1);

        Elements = await Task.Run(() => AgvObjService.GetAllReportTaskPerHourAgv().Where(x => x.W_hour >= newDateTimeFM && x.W_hour <= newDateTimeTO));

    }


    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}

        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(RptTaskHourCount element)
    {
        /*
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.W_hour.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Agv_name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Gate_source} {element.Gate_dest} ".Contains(searchString))
            return true;
        return false;
        */
        return true;
    }

    public async Task DownloadExcelDocument()
    {
        /*
        try
        {
            IbpOrderQueueRptExcel excelReport = new IbpOrderQueueRptExcel();
            List<Sap_Storeout> listExcelReport = new List<Sap_Storeout>();
            listExcelReport = Elements.ToList();
            var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
        */
    }

    public async Task DownloadPdfDocument()
    {
        /*
        try
        {


            IbpOrderQueueRptPdf pdfReport = new IbpOrderQueueRptPdf();
            List<Sap_Storeout> listPdfReport = new List<Sap_Storeout>();
            listPdfReport = Elements.ToList();
            var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
        */
    }
}
