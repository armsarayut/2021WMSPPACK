@page "/4/4_2"
@using System
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inb
@using GoWMS.Server.Models.Wcs

@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

@inject WcsService ObjWcsService
@inject UserServices OpjUserService
@inject IDialogService DialogService

@inject ReportService UserlogService

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@mPageHeader</MudText>
    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=Export Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error"></MudIconButton>
        </MudTooltip>
    </MudAppBar>
    <MudTable Items="@Elements" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?VarGlobals.TableHeight:"")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Tas_Mcworks,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Tas_Mcworks, object>(x=>x.Ctime)">QUEUING</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Tas_Mcworks, object>(x=>x.Lpncode)">PALLET</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Tas_Mcworks, object>(x=>x.Work_Code)">TASKTYPE</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Tas_Mcworks, object>(x=>x.Srm_No)">SRM</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Tas_Mcworks, object>(x=>x.Srm_From)">SOURCE</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Tas_Mcworks, object>(x=>x.Srm_To)">DESTINATION</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Tas_Mcworks, object>(x=>x.Stime)">STARTED</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Tas_Mcworks, object>(x=>x.Modified)">REQUSET-TIME</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Tas_Mcworks, object>(x=>x.Client_Ip)">AGV-DESTINATION</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Tas_Mcworks, object>(x=>x.dectmsg)">STATUS-DESTINATION</MudTableSortLabel></MudTh>
            <MudTh>URGENT</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="QUEUING">@Convert.ToDateTime(context.Ctime).ToString(VarGlobals.FormatDT)</MudTd>
            <MudTd DataLabel="PALLET">@context.Lpncode</MudTd>
            <MudTd DataLabel="TASKTYPE">@context.Work_Code</MudTd>
            <MudTd DataLabel="SRM">@context.Srm_No</MudTd>
            <MudTd DataLabel="SOURCE">@context.Srm_From</MudTd>
            <MudTd DataLabel="DESTINATION">@context.Srm_To</MudTd>
            <MudTd DataLabel="STARTED">
                @if (context.Stime != null)
                    {
                    @Convert.ToDateTime(context.Stime).ToString(VarGlobals.FormatDT)
                    }
            </MudTd>

            <MudTd DataLabel="REQUSET-TIME">
                @if (@context.Work_Code == "05")
                    {
                    @if (context.Modified != null)
                        {
                        @Convert.ToDateTime(context.Modified).ToString(VarGlobals.FormatDT)
                        }

                    }
            </MudTd>
            <MudTd DataLabel="AGV-DESTINATION">
                @if (@context.Work_Code == "05")
                    {
                    <MudChip Variant="Variant.Filled" Color="Color.Info">@context.Client_Ip</MudChip>
                    }
            </MudTd>

            <MudTd DataLabel="STATUS-DESTINATION">
                @if (@context.Work_Code == "05")
                    {

                    @switch (@context.dectmsg)
                        {
                            case "Unavaliable":
                                <MudChip Variant="Variant.Filled" Color="Color.Warning">@context.dectmsg</MudChip>
                                break;
                            case "Avaliable":
                                <MudChip Variant="Variant.Filled" Color="Color.Success">@context.dectmsg</MudChip>
                                break;
                            case "Emptypallet":
                                <MudChip Variant="Variant.Filled" Color="Color.Info">@context.dectmsg</MudChip>
                                break;
                            case "WAIT RGV":
                                <MudChip Variant="Variant.Filled" Color="Color.Secondary">@context.dectmsg</MudChip>
                                break;
                            case "No Detection":
                                <MudChip Variant="Variant.Filled" Color="Color.Dark">@context.dectmsg</MudChip>
                                break;
                            default:
                                <MudChip Variant="Variant.Filled" Color="Color.Error">@context.dectmsg</MudChip>
                                break;
                        }

                    }
            </MudTd>

            <MudTd Class="clm-row-small" DataLabel="URGENT">
                @if (context.Work_Code == "05")
                {
                    <MudFab Color="Color.Error" OnClick="(()=> UpdateUrgent( context.Lpncode))" Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Small" IconSize="Size.Small" />
                }
            </MudTd>

            <MudTd Class="clm-row-small" DataLabel="URGENT">
                @if (@context.Work_Code == "05" && context.Work_Status == 1 && context.Rgv_To <= 3)
                {
                    <MudFab @onclick="@(()=>OpenDialog(@context.Lpncode, @context.Rgv_To.ToString()))" Color="Color.Secondary" Icon="@Icons.Material.Filled.MenuOpen" Size="Size.Small" IconSize="Size.Small" />
                }
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private string mPageHeader = "4.2-ASRS-QUEUE";
    private string pageheader = "4.2-ASRS-QUEUE";
    private string mPagedesc { get; set; } = "4.2-ASRS-QUEUE";
    private string mPagename { get; set; } = "/4/4_2";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Tas_Mcworks selectedItem = null;
    private HashSet<Tas_Mcworks> selectedItems = new HashSet<Tas_Mcworks>();
    private IEnumerable<Tas_Mcworks> Elements = new List<Tas_Mcworks>();

    public int elevation = 0;

        private ResultReturn resultReturn = null;
     string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";
    List<Userroleinfo> Roles = new List<Userroleinfo>();



    protected override async Task OnInitializedAsync()
    {

          //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
        ///

        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);
        Roles = await Task.Run(() => OpjUserService.GetUserRole(mPagename, long.Parse(sGroupID)));
    


        WcsService objCS = new WcsService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetASRSWorks());
    }

          async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    private void setstr(string str)
    {

    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Tas_Mcworks element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Lpncode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Work_Code} {element.Srm_No} {element.Work_Status}".Contains(searchString))
            return true;
        return false;
    }

    private async Task UpdateUrgent(string pallet)
    {

        //bool? result = true;
        bool? result = await CheckRoleEdit();
        if (result == true)
        {
            if (ObjWcsService.SetUrgentAsrsQueueByPallet(pallet) == true)
            {
                this.InsertAuditrial("PALLET [" + pallet +"] set urgent succeed", pageheader);

                Snackbar.Add("Update Urgent succeed", Severity.Success);
                //this.InsertAuditrial("Set UpdateUrgent : " + pallet.ToString(), pageheader);
                Elements = await Task.Run(() => ObjWcsService.GetASRSWorks());
                this.StateHasChanged();
            }
            else
            {
                Snackbar.Add("UpdateUrgent unsuccessful", Severity.Error);
                this.InsertAuditrial("PALLET [" + pallet + "] set urgent unsuccessful", pageheader);
            }
        }

    }

    private async Task OpenDialog(string palletcode, string gatefrom)
    {

         bool? result = await CheckRoleEdit();
        if (result == true)
        {
            DialogOptions closeOnEscapeKey = new DialogOptions() { CloseButton = true };
            var parameters = new DialogParameters { ["Palletcode"] = palletcode };
            string sdialogTitle = "[" + palletcode + "] GATE : " + gatefrom;

            var dialog = DialogService.Show<DialogRGVChangeGate>(sdialogTitle, parameters);
        }

    }




    #region "Role"
    private async Task<bool> CheckRoleAdd()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_add == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleAddPermit, yesText: "OK");
            }

        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleEdit()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_edit == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleEditPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleDelete()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_del == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleDelPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }


        return bRet;
    }

    private async Task<bool> CheckRoleApprove()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_apv == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleApprovePermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }
        return bRet;
    }

    private async Task<bool> CheckRoleReport()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_rpt == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleReportPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }
    #endregion
}
