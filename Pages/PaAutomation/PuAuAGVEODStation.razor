@page "/paau/agvreporteodstation"
@using System
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Wcs
@using GoWMS.Server.Models.Hagv
@using GoWMS.Server.Reports

@inject IJSRuntime JSRuntime
@inject AgvService AgvObjService


@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@mPagecaption</MudText>
    <MudTable Items="@Elements" 
    FixedHeader="@fixed_header" 
    FixedFooter="@fixed_footer" 
    Height="@(fixed_header || fixed_footer ? "600px" : "")" 
    Dense="@dense" 
    Hover="@hover" 
    Bordered="@bordered" 
    Striped="@striped" 
    Filter="new Func<AgvRptEODStation, bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
              
                       
                  <MudTooltip Text="Export" Color="Color.Secondary" Placement="Placement.Top">
                <MudMenu Icon="@Icons.Filled.Download" Color="Color.Primary">
                    <MudMenuItem>Excel</MudMenuItem>
                    <MudMenuItem>Pdf</MudMenuItem>
                </MudMenu>
            </MudTooltip>
                     
                     <MudGrid>
                           <MudSpacer />   
                          <MudItem xs=6 >
                             <MudDateRangePicker @ref="_picker" Label="Search Date" @bind-DateRange="_dateRange">
                                <PickerActions>
                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                                    <MudButton OnClick="@(() => setFindDate(false))">Cancel</MudButton>
                                    <MudButton Color="Color.Primary" OnClick="@(() => setFindDate(true))">Ok</MudButton>
                                </PickerActions>
                            </MudDateRangePicker>
                         </MudItem>
                        
                            <MudItem xs=6 >
                                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </MudItem>
                         </MudGrid>
             @*
            <MudItem xs=6 sm=3>
                <MudDatePicker Label="FROM DATE" @bind-Date="date" />
                <MudDatePicker Label="TO DATE" @bind-Date="date" />
                <MudButton>Find</MudButton>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </MudItem>
            

            
             <MudItem xs=6 sm=3>
                <MudDatePicker Label="FROM DATE" @bind-Date="date" />
                <MudDatePicker Label="TO DATE" @bind-Date="date" />
            </MudItem>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            *@
            </ToolBarContent>


        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<AgvRptEODStation, object>(x=>x.W_date)">DATE</MudTableSortLabel></MudTh>
             <MudTh><MudTableSortLabel SortBy="new Func<AgvRptEODStation, object>(x=>x.Gate_source)">SOURCE</MudTableSortLabel></MudTh>
              <MudTh><MudTableSortLabel SortBy="new Func<AgvRptEODStation, object>(x=>x.Gate_dest)">DESTINATION</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AgvRptEODStation, object>(x=>x.W_count)">COUNT</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="DATETIME">@Convert.ToDateTime(context.W_date).ToShortDateString()</MudTd>
            <MudTd DataLabel="SOURCE">@context.Gate_source</MudTd>
            <MudTd DataLabel="DESTINATION">@context.Gate_dest</MudTd>
            <MudTd DataLabel="COUNT">@context.W_count</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 20, 50, 100 }" />
        </PagerContent>
    </MudTable>
}

@code {
    private string mPagecaption { get; set; } = "AGV ENDOFDAY REPORT";
    private bool _processing = false;

    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private AgvRptEODStation selectedItem = null;
    private HashSet<AgvRptEODStation> selectedItems = new HashSet<AgvRptEODStation>();
    private IEnumerable<AgvRptEODStation> Elements = new List<AgvRptEODStation>();

    private IEnumerable<AgvRptEODStation> Elementsource = new List<AgvRptEODStation>();

    private List<AgvRptEODStation> Filter = new List<AgvRptEODStation>();


    public int elevation = 0;
    DateTime? date = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day); 

    MudDateRangePicker _picker;
    DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);

    protected override async Task OnInitializedAsync()
    {
        AgvService objCS = new AgvService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elementsource = await Task.Run(() => objCS.GetEndofDayStation());

        Elements = Elementsource;

    }

    private void setstr(string str)
    {
        //  if (mPalletcode.Length <= 0)
        //  {
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //  else
        //  {
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}

        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(AgvRptEODStation element)
    {
        /*
        if (string.IsNullOrWhiteSpace(searchString))
        return true;
        if (element.W_hour.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;
        if (element.Agv_name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;
        if ($"{element.Gate_source} {element.Gate_dest} ".Contains(searchString))
            return true;
        return false;
        */
        return true;
    }

    public async Task DownloadExcelDocument()
    {
        /*
        try
        {
        IbpOrderQueueRptExcel excelReport = new IbpOrderQueueRptExcel();
        List<Sap_Storeout> listExcelReport = new List<Sap_Storeout>();
        listExcelReport = Elements.ToList();
        var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
        //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
            {
            var exmsg = e.Message.ToString();
        }
        */
    }

    public async Task DownloadPdfDocument()
    {
        /*
        try
        {
        IbpOrderQueueRptPdf pdfReport = new IbpOrderQueueRptPdf();
        List<Sap_Storeout> listPdfReport = new List<Sap_Storeout>();
        listPdfReport = Elements.ToList();
        var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
        //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));
        }
        catch (Exception e)
            {
            var exmsg = e.Message.ToString();
        }
        */
    }

    void setFindDate(bool bOk)
    {
        _picker.Close();

        if (bOk)
        {
            DateTime dtStart = _dateRange.Start.Value;
            DateTime dtEnd = _dateRange.End.Value;
            Elements = Elementsource.Where(x => x.W_date >= dtStart.Date && x.W_date <= dtEnd.Date).ToList();
            StateHasChanged();
        }
    }


    
}
