@page "/dashboard"
@using GoWMS.Server.Models.Das
@using GoWMS.Server.Models.Public
@using GoWMS.Server.Models.Hagv
@using GoWMS.Server.Models.Wcs
@using System.Threading
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers

@inject AgvService ObjAgvService
@inject DashService ObjDashService
@inject InboundService ObjInbService
@inject IStringLocalizer<Dashboard> L


<MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">@L["Dashboard"]</MudText>
@if (bPageintial)
{
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.Receipt" Color="Color.Primary" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["PendingReceving"]</MudText>
                    <MudText Typo="Typo.subtitle1">@orderPut</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.Queue" Color="Color.Secondary" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["PendingPutaway"]</MudText>
                    <MudText Typo="Typo.subtitle1">@palletPut</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Success" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["Pendingpicking"]</MudText>
                    <MudText Typo="Typo.subtitle1">@orderPicking</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Color="Color.Warning" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["CompleteOrder"]</MudText>
                    <MudText Typo="Typo.subtitle1">@orderCompletePut/@orderCompletePick</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.Login" Color="Color.Primary" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["ASRSStorage"]</MudText>
                    <MudText Typo="Typo.subtitle1">@mstorage</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Secondary" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["ASRSRetrieval"]</MudText>
                    <MudText Typo="Typo.subtitle1">@mretrieval</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.SyncAlt" Color="Color.Success" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["ASRSTotal"]</MudText>
                    <MudText Typo="Typo.subtitle1">@asrstaskcompletenow / @asrstaskcompletelast</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.Speed" Color="Color.Warning" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["ASRSAveragetime"]</MudText>
                    <MudText Typo="Typo.subtitle1">@asrstasktimenow / @asrstasktimelast</MudText>
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.Queue" Color="Color.Primary" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["AGVOnqueue"]</MudText>
                    <MudText Typo="Typo.subtitle1">@agvtaskque</MudText>
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.QueuePlayNext" Color="Color.Secondary" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["AGVInprocess"]</MudText>
                    <MudText Typo="Typo.subtitle1">@agvtaskpro</MudText>
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.Task" Color="Color.Success" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["AGVComplete"]</MudText>
                    <MudText Typo="Typo.subtitle1">@agvtaskcompletenow / @agvtaskcompletelast</MudText>
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:80px;">
                <MudIcon Icon="@Icons.Material.Filled.Timer" Color="Color.Warning" Class="mx-4" Style="width:40px; height:40px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["AGVAveragetime"]</MudText>
                    <MudText Typo="Typo.subtitle1">@agvtasktimenow / @agvtasktimelast  </MudText>
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudCard Elevation="25" Style="height: 400px;">
                <MudHidden Breakpoint="Breakpoint.Xs">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@L["Lane"] 01</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudPaper Class="flex-grow-1 flex-shrink-1 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(255, 64, 129);")">
                        <MudText Align="Align.Center" Typo="Typo.h6">@L["Total"]:@L1Total</MudText>
                    </MudPaper>
                    <MudPaper Class="d-flex py-2 px-1">
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(41, 121, 255);")">
                            <MudText Align="Align.Center" Typo="Typo.h6">@L["Occupied"]:@L1Use</MudText>
                        </MudPaper>
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-2" Style="@($"color:{Colors.Shades.White}; background:rgb(83, 199, 144);")">
                            <MudText Align="Align.Center" Typo="Typo.h6">
                                @L["Free"]:@L1Emp
                            </MudText>
                        </MudPaper>
                    </MudPaper>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@L["Lane"] 01</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudPaper Class="flex-grow-1 flex-shrink-1 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(255, 64, 129);")">
                        <MudText Align="Align.Center" Typo="Typo.body1">@L["Total"]:@L1Total</MudText>
                    </MudPaper>
                    <MudPaper Class="d-flex py-2 px-1">
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(41, 121, 255);")">
                            <MudText Align="Align.Center" Typo="Typo.body1">@L["Occupied"]:@L1Use</MudText>
                        </MudPaper>
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-2" Style="@($"color:{Colors.Shades.White}; background:rgb(83, 199, 144);")">
                            <MudText Align="Align.Center" Typo="Typo.body1">
                                @L["Free"]:@L1Emp
                            </MudText>
                        </MudPaper>
                    </MudPaper>
                </MudHidden>

                <br />
                <MudChart ChartType="ChartType.Donut" InputData="@data1" @bind-SelectedIndex="Index1" InputLabels="@labels1" Width="28%" Height="28%" />
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudCard Elevation="25" Style="height: 400px;">
                <MudHidden Breakpoint="Breakpoint.Xs">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@L["Lane"] 02</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudPaper Class="flex-grow-1 flex-shrink-1 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(255, 64, 129);")">
                        <MudText Align="Align.Center" Typo="Typo.h6">@L["Total"]:@L2Total</MudText>
                    </MudPaper>
                    <MudPaper Class="d-flex py-2 px-1">
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(41, 121, 255);")">
                            <MudText Align="Align.Center" Typo="Typo.h6">@L["Occupied"]:@L2Use</MudText>
                        </MudPaper>
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-2" Style="@($"color:{Colors.Shades.White}; background:rgb(83, 199, 144);")">
                            <MudText Align="Align.Center" Typo="Typo.h6">@L["Free"]:@L2Emp</MudText>
                        </MudPaper>
                    </MudPaper>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@L["Lane"] 02</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudPaper Class="flex-grow-1 flex-shrink-1 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(255, 64, 129);")">
                        <MudText Align="Align.Center" Typo="Typo.body1">@L["Total"]:@L2Total</MudText>
                    </MudPaper>
                    <MudPaper Class="d-flex py-2 px-1">
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(41, 121, 255);")">
                            <MudText Align="Align.Center" Typo="Typo.body1">@L["Occupied"]:@L2Use</MudText>
                        </MudPaper>
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-2" Style="@($"color:{Colors.Shades.White}; background:rgb(83, 199, 144);")">
                            <MudText Align="Align.Center" Typo="Typo.body1">
                                @L["Free"]:@L2Emp
                            </MudText>
                        </MudPaper>
                    </MudPaper>
                </MudHidden>
                <br />
                <MudChart ChartType="ChartType.Donut" InputData="@data2" @bind-SelectedIndex="Index2" InputLabels="@labels2" Width="28%" Height="28%" />
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudCard Elevation="25" Style="height: 400px;">
                <MudHidden Breakpoint="Breakpoint.Xs">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@L["Lane"] 03</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudPaper Class="flex-grow-1 flex-shrink-1 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(255, 64, 129);")">
                        <MudText Align="Align.Center" Typo="Typo.h6">@L["Total"]:@L3Total</MudText>
                    </MudPaper>
                    <MudPaper Class="d-flex py-2 px-1">
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(41, 121, 255);")">
                            <MudText Align="Align.Center" Typo="Typo.h6">@L["Occupied"]:@L3Use</MudText>
                        </MudPaper>
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-2" Style="@($"color:{Colors.Shades.White}; background:rgb(83, 199, 144);")">
                            <MudText Align="Align.Center" Typo="Typo.h6">@L["Free"]:@L3Emp</MudText>
                        </MudPaper>
                    </MudPaper>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@L["Lane"] 03</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudPaper Class="flex-grow-1 flex-shrink-1 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(255, 64, 129);")">
                        <MudText Align="Align.Center" Typo="Typo.body1">@L["Total"]:@L3Total</MudText>
                    </MudPaper>
                    <MudPaper Class="d-flex py-2 px-1">
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(41, 121, 255);")">
                            <MudText Align="Align.Center" Typo="Typo.body1">@L["Occupied"]:@L3Use</MudText>
                        </MudPaper>
                        <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-2" Style="@($"color:{Colors.Shades.White}; background:rgb(83, 199, 144);")">
                            <MudText Align="Align.Center" Typo="Typo.body1">
                                @L["Free"]:@L3Emp
                            </MudText>
                        </MudPaper>
                    </MudPaper>
                </MudHidden>
                <br />
                <MudChart ChartType="ChartType.Donut" InputData="@data3" @bind-SelectedIndex="Index3" InputLabels="@labels3" Width="28%" Height="28%" />
            </MudCard>
        </MudItem>


    </MudGrid>
}

@code { private IEnumerable<DashAgvTime> AgvCompleteData = new List<DashAgvTime>();
    private IEnumerable<Vrpt_shelfsummary> Elementlocation = new List<Vrpt_shelfsummary>();
    private IEnumerable<VLocationDash> ElementWorks = new List<VLocationDash>();
    private IEnumerable<DashTaskTime> AsrsCompleteData = new List<DashTaskTime>();

    private IEnumerable<AsrsTaskSummary> AsrsTaskofday = new List<AsrsTaskSummary>();

    private IEnumerable<Vrpt_operationresult_sum> Elementorders = new List<Vrpt_operationresult_sum>();

    /*
    EarningReport[] earningReports = new EarningReport[]
{
        new EarningReport { Name = "SRM01", Title = "Disconnect", Avatar = "https://avatars2.githubusercontent.com/u/71094850?s=460&u=66c16f5bb7d27dc751f6759a82a3a070c8c7fe4b&v=4", Salary = "10:01", Severity = Color.Error, SeverityTitle = "High"},
        new EarningReport { Name = "RGV01", Title = "Disconnect", Avatar = "https://avatars.githubusercontent.com/u/16208742?s=120&v=4", Salary = "10:02", Severity = Color.Error, SeverityTitle = "High"},
        new EarningReport { Name = "CVY01", Title = "Barcode not found", Avatar = "https://avatars2.githubusercontent.com/u/10367109?s=460&amp;u=2abf95f9e01132e8e2915def42895ffe99c5d2c6&amp;v=4", Salary = "10:05", Severity = Color.Warning, SeverityTitle = "Medium"},
    };

    class EarningReport
    {
        public string Avatar;
        public string Name;
        public string Title;
        public Color Severity;
        public string SeverityTitle;
        public string Salary;
    }
    */

    private Int64 L1Total = 0;
    private Int64 L1Use = 0;
    private Int64 L1Emp = 0;

    private Int64 L2Total = 0;
    private Int64 L2Use = 0;
    private Int64 L2Emp = 0;

    private Int64 L3Total = 0;
    private Int64 L3Use = 0;
    private Int64 L3Emp = 0;

    private Int64 mstorage = 0;
    private Int64 mretrieval = 0;
    private Int64 mtotal = 0;

    private int Index1 = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize1 = 2;
    double[] data1 = { 90, 10, 10, 10 };
    string[] labels1 = { "Occupied", "Free", "Block/Error", "Stack" };

    private int Index2 = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize2 = 2;
    double[] data2 = { 80, 10, 10, 10 };
    string[] labels2 = { "Occupied", "Free", "Block/Error", "Stack" };
    string[] xlabels2 = { "80", "100" };

    private int Index3 = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize3 = 2;
    double[] data3 = { 50, 10, 10, 10 };
    string[] labels3 = { "Occupied", "Free", "Block/Error", "Stack" };

    string agvtasktimenow { get; set; } = "";
    Int64 agvtaskcompletenow { get; set; } = 0;

    string agvtasktimelast { get; set; } = "";
    Int64 agvtaskcompletelast { get; set; } = 0;

    Int64 agvtaskpro { get; set; } = 0;
    Int64 agvtaskque { get; set; } = 0;


    string asrstasktimenow { get; set; } = "";
    Int64 asrstaskcompletenow { get; set; } = 0;

    string asrstasktimelast { get; set; } = "";
    Int64 asrstaskcompletelast { get; set; } = 0;

    Int64 asrstaskpro { get; set; } = 0;
    Int64 asrstaskque { get; set; } = 0;

    bool bPageintial { get; set; } = false;

    private Int64 palletGR = 0;
    private Int64 orderGR = 0;

    private Int64 palletPut = 0;
    private Int64 orderPut = 0;

    private Int64 palletPicking = 0;
    private Int64 orderPicking = 0;

    private Int64 palletComplete = 0;
    private Int64 orderComplete = 0;

    private Int64 orderCompletePut = 0;
    private Int64 orderCompletePick = 0;



    private ChartOptions _lineChartOptions = new ChartOptions
    {
        DisableLegend = true

    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //AgvDashboardData();

        Elementlocation = await Task.Run(() => ObjDashService.GetAllLocationSummary());
        AsrsTaskofday = await Task.Run(() => ObjDashService.GetTaskofday());
        AgvCompleteData = await Task.Run(() => ObjAgvService.GetAllDashboardComplete());
        AsrsCompleteData = await Task.Run(() => ObjDashService.GetASRSDashboardComplete());

        palletPut = await ObjInbService.GetSumPalletAllInbGoodreceiptGo();
        orderPut = await ObjInbService.GetSumOrderAllInbGoodreceiptGo();

        palletPicking = await ObjInbService.GetSumPalletAllOubGoodPickingGo();
        orderPicking = await ObjInbService.GetSumOrderAllOubGoodPickingGo();
        Elementorders = await Task.Run(() => ObjDashService.GetAllOrderofDay());


        AgvDashboardData();
        ASRSDashboardData();
        ShowSummaryLocation();
        ShowASRSTask();

        bPageintial = true;

        if (Elementorders.ToList().Count > 0)
        {
            var vorderCompletePut = Elementorders.Select(a => a.C01).Single();
            orderCompletePut = (Int64)vorderCompletePut;

            var vorderCompletePick = Elementorders.Select(a => a.C05).Single();
            orderCompletePick = (Int64)vorderCompletePick;
        }
        else
        {
            orderCompletePut = 0;
            orderCompletePick = 0;

        }

    }

    private void setstr(string str)
    {
        if (str.Length == 10)
        {
            string sbstr;
            sbstr = str.Substring(0, 1);

            switch (sbstr)
            {
                case "A":
                    stxtInput = "A : " + str.Substring(1, 9);
                    break;
                case "B":
                    stxtInput = "B : " + str.Substring(1, 9);
                    break;
                case "C":
                    stxtInput = "C : " + str.Substring(1, 9);
                    break;
                default:
                    stxtInput = str;
                    break;
            }
        }
    }

    private string stxtInput { get; set; }
    public string MyValue { get; set; }
    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue;
            setstr(MyValue);

            MyValue = "";
        }
    }

    void AgvDashboardData()
    {
        //AgvCompleteData = await Task.Run(() => ObjAgvService.GetAllDashboardComplete());

        //AgvCompleteData = ObjAgvService.GetAllDashboardComplete();

        if (AgvCompleteData.ToList().Count > 0)
        {
            foreach (var val in AgvCompleteData)
            {
                if (val.Checkday.ToString() == "CURR")
                {
                    agvtasktimenow = val.Agvtime.ToString();
                    agvtaskcompletenow = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "LAST")
                {
                    agvtasktimelast = val.Agvtime.ToString();
                    agvtaskcompletelast = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "QUEU")
                {
                    agvtaskque = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "QPRO")
                {
                    agvtaskpro = val.Counttask.Value;
                }
            }
        }
        else
        {


        }
    }

    void ASRSDashboardData()
    {
        //AsrsCompleteData = ObjDashService.GetASRSDashboardComplete();

        // AsrsCompleteData = await Task.Run(() => ObjDashService.GetASRSDashboardComplete());


        if (AsrsCompleteData.ToList().Count > 0)
        {
            foreach (var val in AsrsCompleteData)
            {
                if (val.Checkday.ToString() == "CURR")
                {
                    asrstasktimenow = val.Tasktime.ToString();
                    asrstaskcompletenow = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "LAST")
                {
                    asrstasktimelast = val.Tasktime.ToString();
                    asrstaskcompletelast = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "QUEU")
                {
                    asrstaskque = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "QPRO")
                {
                    asrstaskpro = val.Counttask.Value;
                }
            }
        }
        else
        {


        }
    }

    void ShowSummaryLocation()
    {

        var allCorrect1 = Elementlocation.Where(a => a.Srm_No == 1).ToList();

        if (allCorrect1.ToList().Count > 0)
        {
            foreach (var val in allCorrect1)
            {
                data1[0] = (double)val.Locavl;
                data1[1] = (double)val.Locemp;
                data1[2] = (double)val.Plerr;
                data1[3] = (double)val.Plemp;

                L1Total = (Int64)val.Total;
                L1Use = (Int64)val.Locavl;
                L1Emp = (Int64)val.Locemp;

            }
        }
        else
        {
            data1.Append(0);
            data1.Append(0);
            data1.Append(0);
            data1.Append(0);
            L1Total = 0;
            L1Use = 0;
            L1Emp = 0;
        }

        var allCorrect2 = Elementlocation.Where(a => a.Srm_No == 2).ToList();

        if (allCorrect2.ToList().Count > 0)
        {
            foreach (var val in allCorrect2)
            {

                data2[0] = (double)val.Locavl;
                data2[1] = (double)val.Locemp;
                data2[2] = (double)val.Plerr;
                data2[3] = (double)val.Plemp;

                L2Total = (Int64)val.Total;
                L2Use = (Int64)val.Locavl;
                L2Emp = (Int64)val.Locemp;
            }
        }
        else
        {
            data2.Append(0);
            data2.Append(0);
            data2.Append(0);
            data2.Append(0);
            L2Total = 0;
            L2Use = 0;
            L2Emp = 0;
        }



        var allCorrect3 = Elementlocation.Where(a => a.Srm_No == 3).ToList();

        if (allCorrect3.ToList().Count > 0)
        {
            foreach (var val in allCorrect3)
            {

                data3[0] = (double)val.Locavl;
                data3[1] = (double)val.Locemp;
                data3[2] = (double)val.Plerr;
                data3[3] = (double)val.Plemp;

                L3Total = (Int64)val.Total;
                L3Use = (Int64)val.Locavl;
                L3Emp = (Int64)val.Locemp;
            }
        }
        else
        {
            data3.Append(0);
            data3.Append(0);
            data3.Append(0);
            data3.Append(0);
            L3Total = 0;
            L3Use = 0;
            L3Emp = 0;
        }

    }

    void ShowASRSTask()
    {
        var allCorrectTas01 = AsrsTaskofday.Where(a => a.W_date != null).ToList();

        //var allCorrectTas01 = ElementWorks.Where(a => a.Work_Code == "01" || a.Work_Code == "101").ToList();

        if (allCorrectTas01.ToList().Count > 0)
        {
            foreach (var val in allCorrectTas01)
            {

                mstorage = (Int64)val.Sumin;
                mretrieval = (Int64)val.Sumout;
                mtotal = (Int64)val.Wtotal;
            }
        }
        else
        {

            mstorage = 0;
            mretrieval = 0;
            mtotal = 0;
        }

    }

}