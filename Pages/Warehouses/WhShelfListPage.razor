@page "/wh/shelf"
@using System
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inv
@using GoWMS.Server.Reports

@inject IJSRuntime JSRuntime
@inject InvService ObjService

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary"> @mPagecaption </MudText>
    <MudTable Items="@Elements" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"600px":"")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Vrpt_shelf_listInfo,bool>(FilterFunc)" @bind-SelectedItem="selectedItem" SortLabel="Sort By">
        <ToolBarContent>
            <MudTooltip Text="Export" Color="Color.Secondary" Placement="Placement.Top">
                <MudMenu Icon="@Icons.Filled.Download" Color="Color.Primary">
                    <MudMenuItem>Excel</MudMenuItem>
                    <MudMenuItem>Pdf</MudMenuItem>
                </MudMenu>
            </MudTooltip>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Shelfcode)">LOCATION</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Srm_no)">LANE</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Shelfbank)">BANK</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Shelfbay)">BAY</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Shelflevel)">LEVEL</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Lpncode)">PALLET</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Modified)">UPDATED</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.St_desc)">STATUS</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="LOCATION">@context.Shelfcode</MudTd>
            <MudTd DataLabel="LANE">@context.Srm_no</MudTd>
            <MudTd DataLabel="BANK">@context.Shelfbank</MudTd>
            <MudTd DataLabel="BAY">@context.Shelfbay</MudTd>
            <MudTd DataLabel="LEVEL">@context.Shelflevel</MudTd>
            <MudTd DataLabel="PALLET">@context.Lpncode</MudTd>
            <MudTd DataLabel="UPDATED">@context.Modified</MudTd>
            <MudTd DataLabel="">
                @if (@context.St_desc == "ว่างไม่มีพาเลท")
                    {

                    <MudChip Variant="Variant.Outlined" Color="Color.Primary">@context.St_desc</MudChip>

                    @*
                        <MudRating ReadOnly="true" SelectedValue="1" />
                    <MudAvatar Color="Color.Primary">@context.St_desc</MudAvatar>

            <MudIcon Icon="@Icons.Material.Filled.HourglassEmpty" Size="Size.Small" IconSize="Size.Small"></MudIcon>
                    *@
                    }
                    else
                    {
                    <MudChip Variant="Variant.Outlined" Color="Color.Secondary">@context.St_desc</MudChip>


                    @*
                         <MudRating ReadOnly="true" SelectedValue="2" />
                    <MudAvatar Color="Color.Secondary">@context.St_desc</MudAvatar>

            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" IconSize="Size.Small"></MudIcon>
                    *@
                    }
            </MudTd>
            

                     @*
        <MudTd DataLabel="Itemname" Style="@(AddressContext.OrderPositionStatus == PositionStatus.rdy ? $"background:{Colors.BlueGrey.Darken4};" : $"background:{Colors.Cyan.Darken1};")">@AddressContext.orderItem.ItemName</MudTd>


        <MudChip Label="true" Color="@context.St_Color">@context.St_desc</MudChip>
            *@
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}"/>
        </PagerContent>
    </MudTable>
}

@code {

    private string stColor = "background-color:yellow;";

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };

    private readonly string mPagecaption = "Location";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Vrpt_shelf_listInfo selectedItem = null;
    private HashSet<Vrpt_shelf_listInfo> selectedItems = new HashSet<Vrpt_shelf_listInfo>();
    private IEnumerable<Vrpt_shelf_listInfo> Elements = new List<Vrpt_shelf_listInfo>();

    public int elevation = 0;

    protected override async Task OnInitializedAsync()
    {
        InvService objCS = new InvService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetShelfList());
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}

        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Vrpt_shelf_listInfo element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Shelfcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            WhShelfListPageRptExcel excelReport = new WhShelfListPageRptExcel();
            List<Vrpt_shelf_listInfo> listExcelReport = new List<Vrpt_shelf_listInfo>();
            listExcelReport = Elements.ToList();
            var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            WhShelfListPageRptPdf pdfReport = new WhShelfListPageRptPdf();

            List<Vrpt_shelf_listInfo> listPdfReport = new List<Vrpt_shelf_listInfo>();
            listPdfReport = Elements.ToList();
            var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }


}
