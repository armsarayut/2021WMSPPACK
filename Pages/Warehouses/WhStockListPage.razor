@page "/2/2_1"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inv
@using GoWMS.Server.Pdf
@using GoWMS.Server.Reports
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@inject InvService ObjService
@inject UserServices OpjUserService
@inject IJSRuntime JSRuntime

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary"> @mPagecaption </MudText>
    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSwitch T="bool" CheckedChanged="@OnSelectChange" Color="Color.Primary" Label="Select View Stock" />
        <MudSpacer />
        <MudTooltip Text=Export Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

    @if (StkGroup)
    {
        <MudTable Items="@Elements" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?VarGlobals.TableHeight:"")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<InvStockList,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Item_code)">MATERIAL</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Item_name)">DESCRIPTION</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Qty)">STOCK</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Su_no)">PACKID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Tag_no)">ROLLID</MudTableSortLabel></MudTh>
                <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Palletcode)">PALLET</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.StorageArae)">AREA</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Shelfname)">STROAGEBIN</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="clm-row-small" DataLabel="MATERIAL">@context.Item_code</MudTd>
                <MudTd Class="clm-row-small" DataLabel="DESCRIPTION">@context.Item_name</MudTd>
                <MudTd Class="clm-row-small" DataLabel="STOCK" Style="text-align:right">@string.Format(VarGlobals.FormatN2, context.Qty)</MudTd>
                <MudTd Class="clm-row-small" DataLabel="PACKID">@context.Su_no</MudTd>
                <MudTd Class="clm-row-small" DataLabel="ROLLID">@context.Tag_no</MudTd>
                <MudTd Class="clm-row-small" DataLabel="PALLET">@context.Palletcode</MudTd>
                <MudTd Class="clm-row-small" DataLabel="AREA">@context.StorageArae</MudTd>
                <MudTd Class="clm-row-small" DataLabel="STROAGEBIN">@context.Shelfname</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudTable Items="@Elements_" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?VarGlobals.TableHeight:"")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<InvStockSum,bool>(FilterFunc_)" @bind-SelectedItem="selectedItem_">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>MATERIAL</MudTh>
                <MudTh>DESCRIPTION</MudTh>
                <MudTh>STOCK</MudTh>
                <MudTh>COUNT(PACK)</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="clm-row-small" DataLabel="MATERIAL">@context.Item_code</MudTd>
                <MudTd Class="clm-row-small" DataLabel="DESCRIPTION">@context.Item_name</MudTd>
                <MudTd Class="clm-row-small" DataLabel="STOCK" Style="text-align:right">@string.Format(VarGlobals.FormatN2, context.Totalstock)</MudTd>
                <MudTd Class="clm-row-small" DataLabel="COUNT(PACK)" Style="text-align:right">@string.Format(VarGlobals.FormatN0, context.Countpallet)</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
            </PagerContent>
        </MudTable>
    }
}

@code {

    private string mPagecaption = "2.1-StockList";
    private string mPagename { get; set; } = "/2/2_1";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private InvStockList selectedItem = null;
    private HashSet<InvStockList> selectedItems = new HashSet<InvStockList>();
    private IEnumerable<InvStockList> Elements = new List<InvStockList>();

    private InvStockSum selectedItem_ = null;
    private HashSet<InvStockSum> selectedItems_ = new HashSet<InvStockSum>();
    private IEnumerable<InvStockSum> Elements_ = new List<InvStockSum>();

    public int elevation = 0;

    public bool StkGroup { get; set; }


    protected override async Task OnInitializedAsync()
    {
        InvService objCS = new InvService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetStckList());
        Elements_ = await Task.Run(() => objCS.GetStockSum());

        OnSelectChange();
    }


    protected void OnSelectChange()
    {
        StkGroup = !StkGroup;
        if (StkGroup)
        {
            mPagecaption = "2.1-StockList";
        }
        else
        {
            mPagecaption = "2.1-StockList";
        }
    }



    private bool FilterFunc(InvStockList element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Item_code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Palletcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Su_no.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Item_name} {element.Shelfname}".Contains(searchString))
            return true;
        return false;
    }

    private bool FilterFunc_(InvStockSum element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Item_code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Item_name} ".Contains(searchString))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            WhStockListRptExcel excelReport = new WhStockListRptExcel();
            List<InvStockList> listExcelReport = new List<InvStockList>();
            listExcelReport = Elements.ToList();
            var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }



}
