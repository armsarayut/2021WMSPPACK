@page "/wh/stock"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inv

@inject InvService ObjService

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
<MudGrid>
    <MudItem xs="12" md="3">
        <MudSwitch T="bool" CheckedChanged="@OnSelectChange" Color="Color.Primary" Label="Select View Stock" />
    </MudItem>
</MudGrid>

        @if (StkGroup)
        {
            <MudText Typo="Typo.h6" Color="Color.Primary"> @mPageHeader </MudText>
            <MudTable Items="@Elements" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"600px":"")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<InvStockList,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
                <ToolBarContent>
                    <MudTooltip Text="Export" Color="Color.Secondary" Placement="Placement.Top">
                        <MudMenu Icon="@Icons.Filled.Download" Color="Color.Primary">
                            <MudMenuItem>Excel</MudMenuItem>
                            <MudMenuItem>Pdf</MudMenuItem>
                        </MudMenu>
                    </MudTooltip>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Item_code)">MATERIAL</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Item_name)">DESCRIPTION</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Qty)">STOCK</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Su_no)">PACKID</MudTableSortLabel></MudTh>
                    <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Palletcode)">PALLET</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.StorageArae)">AREA</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<InvStockList, object>(x=>x.Shelfname)">STROAGEBIN</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="clm-row-small" DataLabel="MATERIAL">@context.Item_code</MudTd>
                    <MudTd Class="clm-row-small" DataLabel="DESCRIPTION">@context.Item_name</MudTd>
                    <MudTd Class="clm-row-small" DataLabel="STOCK" Style="text-align:right">@string.Format(VarGlobals.FormatN2, context.Qty)</MudTd>
                    <MudTd Class="clm-row-small" DataLabel="PACKID">@context.Su_no</MudTd>
                    <MudTd Class="clm-row-small" DataLabel="PALLET">@context.Palletcode</MudTd>
                    <MudTd Class="clm-row-small" DataLabel="AREA">@context.StorageArae</MudTd>
                    <MudTd Class="clm-row-small" DataLabel="STROAGEBIN">@context.Shelfname</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
                </PagerContent>
            </MudTable>
        }
        else
        {
            <MudText Typo="Typo.h6" Color="Color.Primary"> @mPageHeader </MudText>
            <MudTable Items="@Elements_" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"600px":"")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<InvStockSum,bool>(FilterFunc_)" @bind-SelectedItem="selectedItem_">
                <ToolBarContent>
                    <MudTooltip Text="Export" Color="Color.Secondary" Placement="Placement.Top">
                        <MudMenu Icon="@Icons.Filled.Download" Color="Color.Primary">
                            <MudMenuItem>Excel</MudMenuItem>
                            <MudMenuItem>Pdf</MudMenuItem>
                        </MudMenu>
                    </MudTooltip>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>MATERIAL</MudTh>
                    <MudTh>DESCRIPTION</MudTh>
                    <MudTh>STOCK</MudTh>
                    <MudTh>TOTAL(PALLET)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="clm-row-small" DataLabel="MATERIAL">@context.Item_code</MudTd>
                    <MudTd Class="clm-row-small" DataLabel="DESCRIPTION">@context.Item_name</MudTd>
                    <MudTd Class="clm-row-small" DataLabel="STOCK" Style="text-align:right">@string.Format(VarGlobals.FormatN2, context.Totalstock)</MudTd>
                    <MudTd Class="clm-row-small" DataLabel="TOTAL(PALLET)" Style="text-align:right">@string.Format(VarGlobals.FormatN0, context.Countpallet)</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
                </PagerContent>
            </MudTable>
        }

        }

        @code {

    private string mPageHeader = "Stock List";
        private string msgAction = "Enter Palletcode";
        private string mPalletcode { get; set; } = "";
        private string mPackid { get; set; } = "";
        private string palletcode { get; set; }
        private bool dense = true;
        private bool hover = true;
        private bool striped = true;
        private bool bordered = false;
        private bool fixed_header = true;
        private bool fixed_footer = true;
        private string searchString = "";
        private InvStockList selectedItem = null;
        private HashSet<InvStockList> selectedItems = new HashSet<InvStockList>();
        private IEnumerable<InvStockList> Elements = new List<InvStockList>();

        private InvStockSum selectedItem_ = null;
        private HashSet<InvStockSum> selectedItems_ = new HashSet<InvStockSum>();
        private IEnumerable<InvStockSum> Elements_ = new List<InvStockSum>();

        public int elevation = 0;

        public bool StkGroup { get; set; }


        protected override async Task OnInitializedAsync()
        {
            InvService objCS = new InvService();
            //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
            Elements = await Task.Run(() => objCS.GetStckList());
            Elements_ = await Task.Run(() => objCS.GetStockSum());

            OnSelectChange();
        }


        protected void OnSelectChange()
        {
            StkGroup = !StkGroup;
            if (StkGroup)
            {
                mPageHeader = "Stock List";
            }
            else
            {
                mPageHeader = "Stock Group";
            }
        }



        private bool FilterFunc(InvStockList element)
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Item_code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Palletcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Su_no.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Item_name} {element.Shelfname}".Contains(searchString))
                return true;
            return false;
        }

        private bool FilterFunc_(InvStockSum element)
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Item_code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Item_name} ".Contains(searchString))
                return true;
            return false;
        }

        }
