@page "/oub/break"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Public
@using GoWMS.Server.Models.Oub
@using System.Threading

@inject StoreoutService ObjOubService
@inject ErpService ObjErpService
@inject ErpApiService ObjErpApiService
@inject MasService ObjMasService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h6" Color="Color.Primary">@mPageHeader</MudText>

<MudGrid>
    <MudItem xs="12">
        @if (@elevation == 0) //Defult
        {
            <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 1) //Info
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 2) //Success
        {
            <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 3) // Warning
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 4) // Error
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
    </MudItem>

    <MudItem xs="12">
        <div class="form-group">
            <input style="width: 100%; height: 40px;" type="text" class="form-control" @bind-value="stringputkey" @onkeyup="@DoTheThing" placeholder="Input scan" />
        </div>
    </MudItem>
</MudGrid>

<br />

@*<MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-4">Master Pallet : [ @mPalletcode ]</MudText>
    <MudSkeleton Animation="Animation.False" />*@
@*<MudText Typo="Typo.h6" Color="Color.Info" Class="mb-4">PackID : [ @mPackid ]</MudText>*@

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{

    <MudTable Items="@Elements" 
              Dense="@dense" 
              Hover="@hover" 
              Bordered="@bordered" 
              Striped="@striped" 
              Filter="new Func<Oub_Delivery_Go,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">PALLET:[@mPalletcode]</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Mo_Barcode)">MO</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Package_Id)">PACKID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Material_Code)">MATERIAL</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Material_Description)">DESCRIPTION</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Quantity)">QTY</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Unit)">UNIT</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Pallet_No)">PALLET</MudTableSortLabel></MudTh>
            <MudTh>ACTION</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="clm-row-small" DataLabel="MO">@context.Mo_Barcode</MudTd>
            <MudTd Class="clm-row-small" DataLabel="PACKID">@context.Package_Id</MudTd>
            <MudTd Class="clm-row-small" DataLabel="MATERIAL">@context.Material_Code</MudTd>
            <MudTd Class="clm-row-small" DataLabel="DESCRIPTION">@context.Material_Description</MudTd>
            <MudTd Class="clm-row-small" Style="text-align:right" DataLabel="QTY">@string.Format(VarGlobals.FormatN2, context.Quantity)</MudTd>
            <MudTd Class="clm-row-small" DataLabel="UNIT">@context.Unit</MudTd>
            <MudTd Class="clm-row-small" DataLabel="PALLET">@context.Pallet_No</MudTd>
            <MudTd DataLabel="ACTION">
                <MudFab @onclick="@(()=>DeleteMapID(@context.Efidx.Value))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private string mPageHeader = "BreakPallet";
    private string msgAction = "Enter MasterPallet";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = null;
    public string stringput { get; set; } = "";
    public string stringputkey { get; set; } = null;
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString = "";
    private Oub_Delivery_Go selectedItem = null;
    private HashSet<Oub_Delivery_Go> selectedItems = new HashSet<Oub_Delivery_Go>();
    private IEnumerable<Oub_Delivery_Go> Elements = new List<Oub_Delivery_Go>();


    public int elevation = 0;

    public int cOld = 0;
    public int cNew = 0;

    public string StringKeyPressed = "AAA";

    string KeyPressed = "";
    string EventInfo = "";

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            StringKeyPressed = "";
            KeyPressed = "Key Pressed is " + args.Key;
            EventInfo = "Event Type " + args.Type;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        StoreoutService objCS = new StoreoutService();

        Elements = await Task.Run(() => objCS.GetDeliveryList(mPalletcode));

    }

    async Task setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {

            Boolean bValidate = false;
            bValidate = ObjMasService.ValidateMasterpallet(str.ToUpper());


            if (bValidate)
            {
                mPalletcode = str.ToUpper();
                msgAction = "Enter PackID";
                elevation = 1;
                Snackbar.Add("Enter PackID", Severity.Normal);
            }
            else
            {

                mPalletcode = "";
                elevation = 4;
                msgAction = "Masterpallet find not found";
                Snackbar.Add("Masterpallet find not found", Severity.Warning);

            }
        }
        else
        {
            if (str.ToUpper() == mPalletcode)
            {
                elevation = 2;
                msgAction = "Consolidate successfully";

                mPalletcode = "";
                Snackbar.Add("Consolidate successfully", Severity.Success);
            }
            else
            {
                mPackid = str;
                ObjOubService.SetConsolMappallet(mPalletcode, mPackid);

                msgAction = "Enter PackID or Pallet code for complete";
                elevation = 1;
                Snackbar.Add("Enter PackID or Pallet code for complete", Severity.Info);
            }
        }


        // ErpApiService objGR = new ErpApiService();
        // Elements = objGR.GetAllApiRecevingorderGosypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    async Task DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {

            string pallettemp = stringputkey;

            //setstr(pallettemp);

            await Task.Run(() => setstr(pallettemp));

            //Reset();

            this.stringputkey = null;
            this.mPackid = null;
            cOld = Elements.Count();

            Elements = await Task.Run(() => ObjOubService.GetDeliveryList(mPalletcode));


            this.StateHasChanged();
        }

    }

    private bool FilterFunc(Oub_Delivery_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Mo_Barcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Package_Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Material_Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Material_Description} {element.Job_Code} {element.Job}".Contains(searchString))
            return true;
        return false;
    }

    private void DeleteMap(string pack)
    {

            msgAction = "Cancle successfully";


        ObjOubService.CancelConsolBypack(pack);

        Elements = ObjOubService.GetDeliveryList(mPalletcode);

        this.StateHasChanged();
    }

private void DeleteMapID(Int64 pack)
    {

            msgAction = "Cancle successfully";


        ObjOubService.CancelConsolByID(pack);

        Elements = ObjOubService.GetDeliveryList(mPalletcode);

        this.StateHasChanged();
    }

    async Task Reset()
    {
        this.stringputkey = null;
        this.mPackid = null;

        Elements = ObjOubService.GetDeliveryList(mPalletcode);

        this.StateHasChanged();
    }
}
