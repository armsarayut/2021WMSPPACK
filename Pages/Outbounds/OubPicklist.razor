@page "/oub/picklist"
@using System
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Pdf
@using GoWMS.Server.Data
@using GoWMS.Server.Reports
@using GoWMS.Server.Models.Oub
@using GoWMS.Server.Controllers

@inject IJSRuntime JSRuntime
@inject StoreoutService ObjService
@inject UserServices OpjUserService

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@mPagecaption</MudText>
    <MudTable Items="@Elements" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"600px":"")" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Sap_Storeout,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>

            <MudTooltip Text="Export" Color="Color.Secondary" Placement="Placement.Top">
                <MudMenu Icon="@Icons.Filled.Download" Color="Color.Primary">
                    <MudMenuItem>EXCEL</MudMenuItem>
                    <MudMenuItem>PDF</MudMenuItem>
                </MudMenu>
            </MudTooltip>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh Style="width: 190px;"><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Delivery_Date)">DELIVERYDATE</MudTableSortLabel></MudTh>
            <MudTh Style="width: 190px;"><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Created)">QUEUEDATE</MudTableSortLabel></MudTh>
            <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Pallet_No)">PALLET</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Order_No)">DOCUMENT</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Su_No)">PACKID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Item_Code)">MATERIAL</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Item_Name)">DESCRIPTION</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Request_Qty)">QTY</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Unit)">UNIT</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="clm-row-small" DataLabel="DELIVERYDATE">@Convert.ToDateTime(context.Delivery_Date).ToString(VarGlobals.FormatDTHM)</MudTd>
            <MudTd Class="clm-row-small" DataLabel="QUEUEDATE">@Convert.ToDateTime(context.Created).ToString(VarGlobals.FormatDT)</MudTd>
            <MudTd Class="clm-row-small" DataLabel="PALLET">@context.Pallet_No</MudTd>
            <MudTd Class="clm-row-small" DataLabel="DOCUMENT">@context.Order_No</MudTd>
            <MudTd Class="clm-row-small" DataLabel="PACKID">@context.Su_No</MudTd>
            <MudTd Class="clm-row-small" DataLabel="MATERIAL">@context.Item_Code</MudTd>
            <MudTd Class="clm-row-small" DataLabel="DESCRIPTION">@context.Item_Name</MudTd>
            <MudTd Class="clm-row-small" DataLabel="QTY" Style="text-align:right">@string.Format(VarGlobals.FormatN2, context.Request_Qty)</MudTd>
            <MudTd Class="clm-row-small" DataLabel="UNIT">@context.Unit</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private string mPagecaption { get; set; } = "Pickinglist";
    public string mPagedesc { get; set; } = "Pickinglist";
    private string mPagename { get; set; } = "/oub/picklist";

    private bool _processing = false;

    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Sap_Storeout selectedItem = null;
    private HashSet<Sap_Storeout> selectedItems = new HashSet<Sap_Storeout>();
    private IEnumerable<Sap_Storeout> Elements = new List<Sap_Storeout>();

    public int elevation = 0;

    protected override async Task OnInitializedAsync()
    {
        StoreoutService objCS = new StoreoutService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetAllSapStoreout());
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}

        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Sap_Storeout element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Pallet_No.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Item_Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Item_Name} {element.Order_No} {element.Su_No}".Contains(searchString))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            IbpOrderQueueRptExcel excelReport = new IbpOrderQueueRptExcel();
            List<Sap_Storeout> listExcelReport = new List<Sap_Storeout>();
            listExcelReport = Elements.ToList();
            var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {


            IbpOrderQueueRptPdf pdfReport = new IbpOrderQueueRptPdf();
            List<Sap_Storeout> listPdfReport = new List<Sap_Storeout>();
            listPdfReport = Elements.ToList();
            var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

}
