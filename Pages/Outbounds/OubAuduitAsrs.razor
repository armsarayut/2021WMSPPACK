@page "/2/2_4"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inv
@using System.Text.Json
@inject InvService ObjService
@inject PublicFunServices ObjFunService
@inject IDialogService DialogService



@inject WgcService ObjErpService
@inject ISnackbar Snackbar
@inject ErpApiService ObjApiService
@inject UserServices OpjUserService
@inject IStringLocalizer<OubAuduitAsrs> L


@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    @if (StkGroup)
    {
        <MudText Typo="Typo.h6" Color="Color.Primary"> @mPageHeader</MudText>

        <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Done"
                       Color="Color.Success"
                       OnClick=@OnButtonOrderSelected>START</MudButton>
                    <MudSpacer />
                </MudAppBar>

                <MudTable Items="@Elements.Where(x => x.Efstatus == iState)"
                          FixedHeader="@fixed_header"
                          FixedFooter="@fixed_footer"
                          Height="@(fixed_header || fixed_footer ?VarGlobals.TableHeight:"")"
                          MultiSelection="true"
                          Dense="@dense"
                          Hover="@hover"
                          Bordered="@bordered"
                          Striped="@striped"
                          Filter="new Func<Inv_Stock_GoInfo,bool>(FilterFunc)"
                          @bind-SelectedItems="selectedItems">
                    <ToolBarContent>
                        <MudToolBarSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>MO</MudTh>
                        <MudTh>MATERIAL</MudTh>
                        <MudTh>DESCRIPTION</MudTh>
                        <MudTh>STOCK</MudTh>
                        <MudTh>PACKID</MudTh>
                        <MudTh>ROLLID</MudTh>
                        <MudTh Style="width: 120px;">PALLET</MudTh>
                        <MudTh>STOREDATE</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Class="clm-row-small" DataLabel="MO">@context.Docno</MudTd>
                        <MudTd Class="clm-row-small" DataLabel="MATERIAL">@context.Itemcode</MudTd>
                        <MudTd Class="clm-row-small" DataLabel="DESCRIPTION">@context.Itemname</MudTd>
                        <MudTd Class="clm-row-small" DataLabel="STOCK" Style="text-align:right">@string.Format(VarGlobals.FormatN2, context.Quantity)</MudTd>
                        <MudTd Class="clm-row-small" DataLabel="PACKID">@context.Pallettag</MudTd>
                        <MudTd Class="clm-row-small" DataLabel="ROLLID">@context.Itemtag</MudTd>
                        <MudTd Class="clm-row-small" DataLabel="PALLET">@context.Pallteno</MudTd>
                        <MudTd Class="clm-row-small" DataLabel="STOREDATE">@Convert.ToDateTime(context.Storagetime).ToString(VarGlobals.FormatDT)</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
                    </PagerContent>
                </MudTable>
            }
            else
            {

            }

    <MudMessageBox @ref="mbox" Title="@mboxheader" CancelText="Cancel">
        <MessageContent>
            @foreach (var item in References)
            {
                <br />
                @item
            }
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.DataSaverOn">Confirm!</MudButton>
        </YesButton>
    </MudMessageBox>
}

@code {

    MudMessageBox mbox { get; set; }

    private bool _dense = false;
    private bool _multiSelect = true;

    private string mPageHeader = "2.4-Cycle Count";
    public string mPagedesc { get; set; } = "2.4-Cycle Count";
    private string mPagename { get; set; } = "/2/2_4";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Inv_Stock_GoInfo selectedItem = null;
    private HashSet<Inv_Stock_GoInfo> selectedItems = new HashSet<Inv_Stock_GoInfo>();
    private IEnumerable<Inv_Stock_GoInfo> Elements = new List<Inv_Stock_GoInfo>();

    string state = "Message box hasn't been opened yet";

    string mboxheader { get; set; } = "รายการที่ขอเบิก";
    string mboxcontent { get; set; } = "";
    string mboxmessage { get; set; } = "";

    public int elevation = 0;

    public bool StkGroup { get; set; }

    protected List<string> References { get; set; } = new List<string>();

    private Int32 iState { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        InvService objCS = new InvService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));

        Elements = await Task.Run(() => objCS.GetStockListInfo());

        OnSelectChange();
    }

    protected void OnSelectChange()
    {
        StkGroup = !StkGroup;
        /*
        if (StkGroup)
        {
            mPageHeader = "Cycle Count ";
        }
        else
        {
            mPageHeader = "Stock Group";
        }
        */
    }



    private bool FilterFunc(Inv_Stock_GoInfo element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Docno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Itemcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pallteno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pallettag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Itemname} {element.Storagebin}".Contains(searchString))
            return true;
        return false;
    }



    async Task SelectOrder()
    {
        var result = selectedItems.GroupBy(t => t.Itemcode)
                   .Select(t => new
                   {
                       Itemcode = t.Key,
                       Qty = t.Sum(ta => ta.Quantity),
                   }).ToList();

        System.Text.StringBuilder strPopup = new System.Text.StringBuilder();
        Int16 i = 0;

        foreach (var rec in result)
        {
            i++;
            strPopup.Append(i.ToString() + ". รายการ : ");
            strPopup.Append(rec.Itemcode.ToString());
            strPopup.Append(" จำนวน : ");
            strPopup.AppendLine(rec.Qty.ToString());
        }

        System.Text.StringBuilder popup = new System.Text.StringBuilder();
        popup.AppendLine("รายการที่ขอเบิก");
        popup.Append(strPopup.ToString());

        string sContentText = popup.ToString();

        var parameters = new DialogParameters();
        parameters.Add("ContentText", sContentText);
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Success);

        var formModal = DialogService.Show<DialogTemplateExample_Dialog>("Confirm", parameters);

        var resultModal = await Task.Run(() => formModal.Result);


    }

    private async void OnButtonOrderSelected()
    {
        var resultlist = selectedItems.GroupBy(t => t.Itemcode)
                 .Select(t => new
                 {
                     Itemcode = t.Key,
                     Qty = t.Sum(ta => ta.Quantity),
                 }).ToList();

        System.Text.StringBuilder strPopup = new System.Text.StringBuilder();
        Int16 i = 0;
        mboxcontent = "";

        References.Clear();

        if (resultlist.Count > 0)
        {
            foreach (var rec in resultlist)
            {
                i++;
                strPopup.Clear();
                strPopup.Append(i.ToString() + ". รายการ : ");
                strPopup.Append(rec.Itemcode.ToString());
                strPopup.Append(" จำนวน : ");
                strPopup.AppendLine(rec.Qty.ToString());

                References.Add(strPopup.ToString());
            }
            bool? result = await mbox.Show();
            state = result == null ? "Cancelled" : "Confirmed";

            if (state == "Confirmed")
            {
                SelectOrderPick();
            }

            StateHasChanged();
        }

    }

    private void SelectOrderPick()
    {
        var serializeOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true
        };


        string cus = "MANUAL";
        //string so = "U-" + DateTime.Now.ToString("yyMMddHH");
        string so = ObjFunService.GetRunning("sq002", 4);

        string lot = "-";
        string batch = "-";
        DateTime requestdate = DateTime.Today.Date;


        var pallets = selectedItems.GroupBy(g => g.Pallteno).OrderBy(o => o.Key).Select(s => s.Key);

        var filteredOrders = from order in Elements
                             where pallets.Contains(order.Pallteno)
                             select order;

        var strRES = filteredOrders.OrderBy(x => x.Pallettag).Select(x => new { efidx = x.Efidx, quantity = x.Quantity, packageid = x.Pallettag, materialcode = x.Itemcode, palletno = x.Pallteno, sono = so, customer = cus, lotno = lot, batchno = batch, matematerialdescription = x.Itemname, unit = x.Unit, deliverydate = requestdate }).ToList();


        //var strRES = selectedItems.OrderBy(x => x.Pallettag).Select(x => new { efidx = x.Efidx, quantity = x.Quantity, packageid = x.Pallettag, materialcode = x.Itemcode, palletno = x.Pallteno, sono = so, customer = cus, lotno = lot, batchno = batch, matematerialdescription = x.Itemname, unit = x.Unit, deliverydate = requestdate }).ToList();

        var jsonRES = JsonSerializer.Serialize(strRES, serializeOptions);

        var iReturn = 0;
        var sReturn = "Call";

        ObjApiService.SetAuduitASrsUnplaned(jsonRES, ref iReturn, ref sReturn);

        if (selectedItems.Count > 0)
        {
            if (iReturn == 0)
            {
                Snackbar.Add(sReturn, Severity.Error);
            }
            else
            {
                Snackbar.Add("Order picking created", Severity.Success);
            }
        }
        else
        {
            Snackbar.Add("Please select order picking", Severity.Warning);
        }
    }

}
