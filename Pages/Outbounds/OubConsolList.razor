@page "/3/3_7"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Oub
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@inject StoreoutService ObjService
@inject UserServices OpjUserService
@inject ISnackbar Snackbar

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

@if (Elements == null)
{
    //<p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{

    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudText Typo="Typo.h6" Color="Color.Primary"> @pageheader</MudText>
        </MudItem>
    </MudGrid>

    <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="600px" FixedHeader="true"
              Items="@Elements"
              GroupBy="@_groupDefinition"
              GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
              GroupFooterClass="mb-4"
              Dense="@_dense"
              SelectedItems="@selectedItems"
              MultiSelection="@_multiSelect"
              Filter="new Func<Oub_Delivery_Go,bool>(FilterFunc)">

        <ColGroup>
            @if (_multiSelect)
            {
                <col style="width: 10px;" />
            }
            @if (_groupDefinition.Expandable)
            {
                <col style="width: 10px;" />
            }
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
        </ColGroup>
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Mo_Barcode)">MO</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Package_Id)">PACKID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Material_Code)">MATERIALCODE</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Material_Description)">MATERIALNAME</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Quantity)">REQUESTQTY</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Unit)">UNIT</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Oub_Delivery_Go, object>(x=>x.Deliveryto)">DELIVERYTO</MudTableSortLabel></MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            @*<MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress())">Set Wave</MudButton></MudTd>*@
            <MudTh Class="mud-table-cell-custom-group" colspan="7">@($"{context.GroupName} : {context.Key}")</MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="DELIVERYDATE">@context.Mo_Barcode</MudTd>
            <MudTd DataLabel="PACKID">@context.Package_Id</MudTd>
            <MudTd DataLabel="MATERIALCODE">@context.Material_Code</MudTd>
            <MudTd DataLabel="MATERIALNAME">@context.Material_Description</MudTd>
            <MudTd DataLabel="REQUESTQTY">@string.Format(VarGlobals.FormatN2, context.Quantity)</MudTd>
            <MudTd DataLabel="UNIT">@context.Unit</MudTd>
            <MudTd DataLabel="DELIVERYTO">@context.Deliveryto</MudTd>
        </RowTemplate>
        <GroupFooterTemplate>
            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total : @string.Format(VarGlobals.FormatN2, @context.Items.Sum((e) => e.Quantity)) </MudTh>
        </GroupFooterTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>

}

@code {

    private bool _dense = true;
    private bool _multiSelect = false;

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };

    private readonly string pageheader = "3.7-Consolelist";
    public string mPagedesc { get; set; } = "3.7-Consolelist";
    private string mPagename { get; set; } = "/3/3_7";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Oub_Delivery_Go selectedItem = null;
    private HashSet<Oub_Delivery_Go> selectedItems = new HashSet<Oub_Delivery_Go>();
    private IEnumerable<Oub_Delivery_Go> Elements = new List<Oub_Delivery_Go>();
    public int elevation = 0;

    protected override async Task OnInitializedAsync()
    {
        StoreoutService objCS = new StoreoutService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetDeliveryAll());
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}
        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private void ShowBtnPress()
    {
        // Person tmpPerson = People.First(f => f.Number == nr);
        //tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }

    private TableGroupDefinition<Oub_Delivery_Go> _groupDefinition = new TableGroupDefinition<Oub_Delivery_Go>()
    {
        GroupName = "PALLET",
        Indentation = true,
        Expandable = true,
        Selector = (e) => e.Pallet_No
    };



    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Oub_Delivery_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Package_Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pallet_No.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Mo_Barcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Material_Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


}
