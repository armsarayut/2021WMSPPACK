@page "/Pag/1/1_5"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Mas
@using GoWMS.Server.Models.Inb

@inject MasService ObjMasService
@inject InboundService ObjInboundService

<MudText Typo="Typo.h6" Color="Color.Primary">@mPageHeader</MudText>

<MudGrid>
    <MudItem xs="12">
        @if (elevation == 0) //Defult
        {
            <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else @if (elevation == 1) //Info
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (elevation == 2) //Success
        {
            <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (elevation == 3) // Warning
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (elevation == 4) // Error
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
    </MudItem>
    <MudItem xs="12">
        <div class="form-group">
            <input style="width: 100%; height: 40px" type="text" class="form-control" @bind-value="palletcode" @onkeyup="@DoTheThing" placeholder="Input scan" />
        </div>

    </MudItem>
</MudGrid>

@if (Elements == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Inb_Putaway_Go,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">STORAGEBIN:[@mPalletcode]</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width: 190px;"><MudTableSortLabel SortBy="new Func<Inb_Putaway_Go, object>(x=>x.Created)">QUEUEING</MudTableSortLabel></MudTh>
            <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<Inb_Putaway_Go, object>(x=>x.Palletno)">PALLET</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Putaway_Go, object>(x=>x.Puttype)">TASKTYPE</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="clm-row-small" DataLabel="QUEUEING">@Convert.ToDateTime(context.Created).ToString(VarGlobals.FormatDT)</MudTd>
            <MudTd Class="clm-row-small" DataLabel="PALLET">@context.Palletno</MudTd>
            <MudTd Class="clm-row-small" DataLabel="TASKTYPE">@context.Puttype</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private string mPageHeader = "Storage";
    private string msgAction = "Enter Location";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString = "";
    private Inb_Putaway_Go selectedItem = null;
    private HashSet<Inb_Putaway_Go> selectedItems = new HashSet<Inb_Putaway_Go>();
    private IEnumerable<Inb_Putaway_Go> Elements = new List<Inb_Putaway_Go>();

    private IEnumerable<Mas_Storagebin_Go> MasterStotageBins = new List<Mas_Storagebin_Go>();

    private IEnumerable<Inb_Putaway_Go> MasterQueue = new List<Inb_Putaway_Go>();

    public int elevation = 0 ;

    protected override async Task OnInitializedAsync()
    {
        InboundService objCS = new InboundService();
        Elements = await Task.Run(() => objCS.GetAllInbPutawayGos());
        MasterStotageBins = ObjMasService.GetAllMasterStorageBins();
        //MasterQueue = ObjInboundService.GetAllInbPutawayGos();
    }

    private void setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            var allCorrect = MasterStotageBins.Where(a => a.Binno == str).ToList();

            if (allCorrect.ToList().Count > 0)
            {
                mPalletcode = str;
                msgAction = "Enter Masterpallet";
                elevation = 1;
            }
            else
            {
                mPalletcode = "";
                elevation = 4;
                msgAction = "Location find not found";
            }
        }
        else
        {
            var allCorrect = Elements.Where(a => a.Palletno == str).ToList();

            if (allCorrect.ToList().Count > 0)
            {
                //InQueue
                ObjInboundService.SetStorageComplete(str,mPalletcode);
                elevation = 2;
                msgAction = "Storage successfully";
                mPalletcode = "";
            }
            else
            {
                if (mPalletcode.Length>0)
                {
                    elevation = 1;
                    msgAction = "Please enter Masterpallet";
                }
                else
                {
                    elevation = 1;
                    msgAction = "Please enter Location";
                }
            }
        }
        InboundService objGR = new InboundService();
        Elements = objGR.GetAllInbPutawayGos();
    }

    private string stxtInput { get; set; }
    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue;
            setstr(palletcode);

            palletcode = "";
        }
    }

    private bool FilterFunc(Inb_Putaway_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Palletno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Storagebin.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Storagearea}".Contains(searchString))
            return true;
        return false;
    }

    private void DeleteMap(string pack)
    {
        /*
        msgAction = "Cancle successfully";
        ObjCustomService.CancelReceivingOrderbypack(mPalletcode, pack);

        CustomerService objGR = new CustomerService();
        Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
        */
    }
}
