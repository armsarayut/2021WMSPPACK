@page "/Pag/1/1_1"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models.Api
@using GoWMS.Server.Models.Inb

@inject CustomerService ObjCustomService
@inject ReportService UserlogService

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">Receiving Order</MudText>
    <MudTable Items="@Elements" 
              FixedHeader="@fixed_header" 
              FixedFooter="@fixed_footer" 
              Height="@(fixed_header || fixed_footer ?"600px":"")" 
              Dense="@dense" 
              Hover="@hover" 
              Bordered="@bordered" 
              Striped="@striped" 
              HorizontalScrollbar="true"
              Breakpoint="Breakpoint.Sm"
              Filter="new Func<Inb_Goodreceipt_Go,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudTooltip Text="Export" Color="Color.Secondary" Placement="Placement.Top">
                <MudMenu Icon="@Icons.Filled.Download" Color="Color.Primary">
                    <MudMenuItem>EXCEL</MudMenuItem>
                    <MudMenuItem>PDF</MudMenuItem>
                </MudMenu>
            </MudTooltip>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh Style="width: 190px;"><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Docdate)">RECEIVING</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Pono)">DOCUMENT</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Pallettag)">PACKID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Itemcode)">MATERIAL</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Itemname)">DESCRIPTION</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Quantity)">QTY</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Unit)">UNIT</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Weight)">WEIGHT</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Docno)">JOB</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Docnote)">JOBCODE</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="clm-row-small" DataLabel="RECEIVING">@Convert.ToDateTime(context.Docdate).ToString(VarGlobals.FormatDT)</MudTd>
            <MudTd Class="clm-row-small" DataLabel="DOCUMENT" >@context.Pono</MudTd>
            <MudTd Class="clm-row-small" DataLabel="PackID" >@context.Pallettag</MudTd>
            <MudTd Class="clm-row-small" DataLabel="MATERIAL" >@context.Itemcode</MudTd>
            <MudTd Class="clm-row-small" DataLabel="DESCRIPTION" >@context.Itemname</MudTd>
            <MudTd Class="clm-row-small" Style="text-align:right" DataLabel="QTY" >@string.Format(VarGlobals.FormatN2, context.Quantity)</MudTd>
            <MudTd Class="clm-row-small" DataLabel="UNIT" >@context.Unit</MudTd>
            <MudTd Class="clm-row-small" Style="text-align:right" DataLabel="WEIGHT" >@string.Format(VarGlobals.FormatN2, context.Weight)</MudTd>
            <MudTd Class="clm-row-small" DataLabel="JOB" >@context.Docno</MudTd>
            <MudTd Class="clm-row-small" DataLabel="JOBCODE" >@context.Docnote</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Inb_Goodreceipt_Go selectedItem = null;
    private HashSet<Inb_Goodreceipt_Go> selectedItems = new HashSet<Inb_Goodreceipt_Go>();
    private IEnumerable<Inb_Goodreceipt_Go> Elements = new List<Inb_Goodreceipt_Go>();

    public int elevation = 0;

    protected override async Task OnInitializedAsync()
    {
        InboundService objCS = new InboundService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetAllInbGoodreceiptGos());
        //InsertAuditrial("1.1-Receiving Order","Admin");
    }

    private void setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            mPalletcode = str;
            msgAction = "Enter Pack ID";
            elevation = 3;
        }
        else
        {
            if (str == mPalletcode)
            {
                elevation = 2;
                msgAction = "Mapping successfully";
                ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
                mPalletcode = "";
            }
            else
            {
                mPackid = str;
                ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
            }
        }
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue;
            setstr(palletcode);

            palletcode = "";
        }
    }

    private bool FilterFunc(Inb_Goodreceipt_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Itemtag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pallettag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Itemcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Itemname} {element.Docno} {element.Pono} {element.Docnote}".Contains(searchString))
            return true;
        return false;
    }

    public void Dispose()
    {

    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, VarGlobals.CurrentUserName);
    }

}
