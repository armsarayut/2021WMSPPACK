@page "/1/1_2"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Api
@using GoWMS.Server.Models.Mas
@using System.Threading


@inject ErpService ObjErpService
@inject ErpApiService ObjErpApiService
@inject MasService ObjMasService
@inject ISnackbar Snackbar
@inject UserServices OpjUserService

<MudText Typo="Typo.h6" Color="Color.Primary">@mPagedesc</MudText>

<MudGrid>
    <MudItem xs="12">
        @if (@elevation == 0) //Defult
        {
            <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 1) //Info
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 2) //Success
        {
            <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 3) // Warning
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 4) // Error
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
    </MudItem>

    <MudItem xs="6">
        <div class="form-group">
            <input style="width: 100%; height: 40px;" type="text" class="form-control" @bind-value="stringputkey" @onkeyup="@DoTheThing" placeholder="Input scan" />
        </div>
    </MudItem>
    <MudItem xs="6">
        <MudText Typo="Typo.h4" Color="Color.Error">Total:@Elements.Count()</MudText>
    </MudItem>
</MudGrid>

<br />

@*<MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-4">Master Pallet : [ @mPalletcode ]</MudText>
    <MudSkeleton Animation="Animation.False" />*@
@*<MudText Typo="Typo.h6" Color="Color.Info" Class="mb-4">PackID : [ @mPackid ]</MudText>*@

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{

    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?VarGlobals.TableHeight:"")"
              Dense="@dense" Hover="@hover"
              Bordered="@bordered" Striped="@striped"
              Filter="new Func<Api_Receivingorders_Go,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">PALLET:[@mPalletcode]</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder="Search"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<Api_Receivingorders_Go, object>(x=>x.Lpncode)">PALLET</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Api_Receivingorders_Go, object>(x=>x.Package_Id)">PACKID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Api_Receivingorders_Go, object>(x=>x.Material_Code)">MATERIAL</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Api_Receivingorders_Go, object>(x=>x.Material_Description)">DESCRIPTION</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Api_Receivingorders_Go, object>(x=>x.Gr_Quantity)">QTY</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Api_Receivingorders_Go, object>(x=>x.Unit)">UNIT</MudTableSortLabel></MudTh>
            <MudTh>ACTION</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="clm-row-small" DataLabel="PALLET">@context.Lpncode</MudTd>
            <MudTd Class="clm-row-small" DataLabel="PACKID">@context.Package_Id</MudTd>
            <MudTd Class="clm-row-small" DataLabel="MATERIAL">@context.Material_Code</MudTd>
            <MudTd Class="clm-row-small" DataLabel="DESCRIPTION">@context.Material_Description</MudTd>
            <MudTd Class="clm-row-small" Style="text-align:right" DataLabel="QTY">@string.Format(VarGlobals.FormatN2, context.Gr_Quantity)</MudTd>
            <MudTd Class="clm-row-small" DataLabel="UNIT">@context.Unit</MudTd>
            <MudTd DataLabel="ACTION">
                <MudFab @onclick="@(()=>DeleteMap(@context.Package_Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private string mPagedesc = "1.2-Master Mapping";
    private string mPagename { get; set; } = "/1/1_2";

    private string msgAction = "Enter MasterPallet";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = null;
    public string stringput { get; set; } = "";
    public string stringputkey { get; set; } = null;
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private bool ronly = false;
    private Api_Receivingorders_Go selectedItem = null;
    private HashSet<Api_Receivingorders_Go> selectedItems = new HashSet<Api_Receivingorders_Go>();
    private IEnumerable<Api_Receivingorders_Go> Elements = new List<Api_Receivingorders_Go>();

    private IEnumerable<Api_Receivingorders_Go> MapPalletItem = new List<Api_Receivingorders_Go>();

    private IEnumerable<Mas_Pallet_Go> MasterPallets = new List<Mas_Pallet_Go>();

    private ResultReturn resultReturn = null;

    public int elevation = 0;

    public int cOld = 0;
    public int cNew = 0;

    public string StringKeyPressed = "AAA";

    string KeyPressed = "";
    string EventInfo = "";

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            //KeyPressed = "";
            //EventInfo = "";
            StringKeyPressed = "";
            KeyPressed = "Key Pressed is " + args.Key;
            EventInfo = "Event Type " + args.Type;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ErpApiService objCS = new ErpApiService();
        cOld = Elements.Count();
        //MasterPallets = await Task.Run(() => ObjMasService.GetAllMasterPallets());

        //MasterPallets = ObjMasService.GetAllMasterPallets();

        Elements = await Task.Run(() => objCS.GetAllApiRecevingorderGosypallet(mPalletcode));

        cNew = Elements.Count();

        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));

        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));

        //Elements = await Task.Run(() => objCS.GetReceivivgOrder());
    }

    async Task setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            // var allCorrect = MasterPallets.Where(a => a.Palletno.ToUpper() == str.ToUpper()).ToList();

            Boolean bValidate = false;
            bValidate = ObjMasService.ValidateMasterpallet(str.ToUpper());

            if (bValidate)
            {
                mPalletcode = str.ToUpper();
                msgAction = "Enter PackID";
                elevation = 1;
                Snackbar.Add("Enter PackID", Severity.Normal);
            }
            else
            {
                mPalletcode = "";
                elevation = 4;
                msgAction = "Masterpallet find not found";
                Snackbar.Add("Masterpallet find not found", Severity.Warning);

            }
        }
        else
        {
            if (str.ToUpper() == mPalletcode)
            {
                if (Elements.ToList().Count > 0)
                {
                    elevation = 2;
                    msgAction = "Mapping successfully";

                    //ObjErpApiService.UpdateReceivingOrderbypallet(mPalletcode);
                    ObjErpApiService.SetMappedPallet(mPalletcode);
                    mPalletcode = "";
                    Snackbar.Add("Mapping successfully", Severity.Success);
                }
                else
                {
                    elevation = 3;
                    msgAction = "Please enter PackID";
                    Snackbar.Add("Please enter PackID", Severity.Info);
                }
            }
            else
            {
                mPackid = str;
                MapPalletItem = null;
                MapPalletItem = ObjErpService.GetErpMatReceivingOrdersByTag(mPackid);

                if (MapPalletItem.ToList().Count > 0)
                {
                    ObjErpApiService.ClaerReceivingOrderbypack(mPackid);
                }

                if (MapPalletItem.ToList().Count > 0)
                {
                    string retString;

                    retString = ObjErpApiService.InsertReceivingOrderbypackAsync(MapPalletItem.ToList(), mPalletcode);


                    //retString =  await Task.Run(() => ObjErpApiService.InsertReceivingOrderbypackAsync(MapPalletItem.ToList(), mPalletcode));

                    //ObjErpApiService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
                    msgAction = "Enter PackID or Pallet code for complete";
                    elevation = 1;
                    Snackbar.Add("Enter PackID or Pallet code for complete", Severity.Info);
                }
                else
                {
                    elevation = 3;
                    msgAction = "Find not found PackID please enter again";
                    Snackbar.Add("Find not found PackID please enter again", Severity.Error);
                }
            }
        }

        // ErpApiService objGR = new ErpApiService();
        // Elements = objGR.GetAllApiRecevingorderGosypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    async Task DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {

            string pallettemp = stringputkey;

            //setstr(pallettemp);

            await Task.Run(() => setstr(pallettemp));

            //Reset();

            this.stringputkey = null;
            this.mPackid = null;
            cOld = Elements.Count();

            Elements = await Task.Run(() => ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode));

            //Elements = ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode);
            cNew = Elements.Count();

            if (cOld == cNew)
            {
                Elements = await Task.Run(() => ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode));
            }
            else
            {
                if (mPalletcode.Length > 0)
                {
                    Elements = await Task.Run(() => ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode));
                }
            }
            this.StateHasChanged();
        }

    }

    private bool FilterFunc(Api_Receivingorders_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Package_Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Material_Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Material_Description} {element.Job_Code} {element.Document_Number}".Contains(searchString))
            return true;
        return false;
    }

    private void DeleteMap(string pack)
    {
        msgAction = "Cancle successfully";

        // ObjErpApiService.CancelReceivingOrderbypack(mPalletcode, pack);

        ObjErpApiService.ClaerReceivingOrderbypack(pack);

        //ErpApiService objGR = new ErpApiService();
        // Elements = objGR.GetAllApiRecevingorderGosypallet(mPalletcode);

        //Elements = ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode);

        cOld = Elements.Count();
        Elements = ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode);
        cNew = Elements.Count();

        if (cNew <= 0)
        {
            ObjErpApiService.ClaerReceivingOrdersBypallet(mPalletcode);
        }

    }

    async Task Reset()
    {
        this.stringputkey = null;
        this.mPackid = null;

        //Elements = ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode);
        cOld = Elements.Count();

        Elements = ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode);

        //Elements = await Task.Run(() => ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode));

        cNew = Elements.Count();

        //await Task.Delay(1_000);

        StateHasChanged();
    }
}
