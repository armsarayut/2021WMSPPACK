@page "/10/10_7"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Oub
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@inject StoreoutService ObjService
@inject UserServices OpjUserService
@inject ISnackbar Snackbar

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

@if (Elements == null)
{
    //<p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{

    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudText Typo="Typo.h6" Color="Color.Primary"> @pageheader</MudText>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Save" Style="background-color: limegreen; color: white; width: 300px; height: 30px;" OnClick=@SetOrderpicking>
                Set Wave picking
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height=@VarGlobals.TableHeight FixedHeader="true"
              Items="@Elements"
              GroupBy="@_groupDefinition"
              GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
              GroupFooterClass="mb-4"
              Dense="_dense"
              SelectedItems="@selectedItems"
              MultiSelection="_multiSelect">
        <ColGroup>
            @if (_multiSelect)
            {
                <col style="width: 60px;" />
            }
            @if (_groupDefinition.Expandable)
            {
                <col style="width: 60px;" />
            }
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Delivery_Date)">DELIVERYTIME</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Su_No)">PACKID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Item_Code)">MATERIALCODE</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Item_Name)">MATERIALNAME</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Request_Qty)">REQUESTQTY</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Unit)">UNIT</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Sap_Storeout, object>(x=>x.Requisitioner)">DELIVERYTO</MudTableSortLabel></MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            @*<MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress())">Set Wave</MudButton></MudTd>*@
            <MudTh Class="mud-table-cell-custom-group" colspan="8">@($"{context.GroupName} : {context.Key}")</MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd Style="width: 190px;" DataLabel="DELIVERYTIME">@Convert.ToDateTime(context.Delivery_Date).ToString(VarGlobals.FormatDTHM)</MudTd>
            <MudTd DataLabel="PACKID">@context.Su_No</MudTd>
            <MudTd DataLabel="MATERIALCODE">@context.Item_Code</MudTd>
            <MudTd DataLabel="MATERIALNAME">@context.Item_Name</MudTd>
            <MudTd DataLabel="REQUESTQTY" Style="text-align: right">@string.Format(VarGlobals.FormatN2, context.Request_Qty)</MudTd>
            <MudTd DataLabel="UNIT">@context.Unit</MudTd>
            <MudTd DataLabel="DELIVERYTO">@context.Requisitioner</MudTd>
        </RowTemplate>
        <GroupFooterTemplate>
            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total : @string.Format(VarGlobals.FormatN2, context.Items.Sum((e) => e.Request_Qty)) </MudTh>
        </GroupFooterTemplate>
    </MudTable>

}

@code {

    private bool _dense = true;
    private bool _multiSelect = true;

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };

    private readonly string pageheader = "10.7-GI-START";
    public string mPagedesc { get; set; } = "10.7-GI-START";
    private string mPagename { get; set; } = "/10/10_7";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Sap_Storeout selectedItem = null;
    private HashSet<Sap_Storeout> selectedItems = new HashSet<Sap_Storeout>();
    private IEnumerable<Sap_Storeout> Elements = new List<Sap_Storeout>();
    public int elevation = 0;

    protected override async Task OnInitializedAsync()
    {
        StoreoutService objCS = new StoreoutService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        //Elements = await Task.Run(() => objCS.GetSapStoreoutSetBatch());

       

        Elements = await Task.Run(() => objCS.GetSapStoreoutSetBatch().Where(x => x.Ship_To_Code == "AGV02"));
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}
        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private void ShowBtnPress()
    {
        // Person tmpPerson = People.First(f => f.Number == nr);
        //tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }

    private TableGroupDefinition<Sap_Storeout> _groupDefinition = new TableGroupDefinition<Sap_Storeout>()
    {
        GroupName = "MO",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Order_No
    };



    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Sap_Storeout element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Su_No.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void SetOrderpicking()
    {
        string strRunning = ObjService.GetRunnning("sq002", 4);

        var strLON1 = selectedItems.GroupBy(c => new
        {
            c.Delivery_Date,
            c.Delivery_Priority,
            c.Order_No,
            c.Ship_To_Code
        })
        .Select(gcs => new
        {
            delivery_date = gcs.Key.Delivery_Date,
            delivery_priority = gcs.Key.Delivery_Priority,
            order_no = gcs.Key.Order_No,
            ship_to_code = gcs.Key.Ship_To_Code,
        }).ToList();

        Int32 iTotal = strLON1.Count;
        Int32 iCount = 0;
        Boolean bCheck;
        foreach (var recItem in strLON1)
        {
            DateTime delivery_date = (DateTime)recItem.delivery_date;
            Int32 delivery_priority = (Int32)recItem.delivery_priority;
            string order_no = recItem.order_no;
            string ship_to_code = recItem.ship_to_code;

            // Create Batch Order

            bCheck = false;
            bCheck = ObjService.CreateBatchOrder_curoom(delivery_date, delivery_priority, order_no, ship_to_code, strRunning);

            if (bCheck == true)
            {
                iCount++;
            }
            else
            {
                break;
            }
        }

        // Create Batch Setting
        if (iCount == iTotal)
        {
            bCheck = false;
            bCheck = ObjService.CreateBatchSetting(strRunning, 1);
        }
        else
        {
            bCheck = false;
            bCheck = ObjService.RollbackBatch(strRunning);
            Snackbar.Add("Curing Start GI >>  Order Losss", Severity.Error);
        }

        // Start Batch

        if (bCheck == true)
        {
            bCheck = false;
            bCheck = ObjService.StartBatchsetting_curoom(strRunning, 1);
        }

        if (bCheck == true)
        {
            Snackbar.Add("Curing Start GI >> Success", Severity.Success);
        }
        else
        {
            Snackbar.Add("Curing Start GI >> Start Losss", Severity.Error);
        }

        Elements = ObjService.GetSapStoreoutSetBatch();

    }
}
