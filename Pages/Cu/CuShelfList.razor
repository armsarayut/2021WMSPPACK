@page "/10/10_3"
@using System
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inv
@using GoWMS.Server.Reports
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@inject IJSRuntime JSRuntime
@inject InvService ObjService
@inject AgvService ObjAgvService
@inject UserServices OpjUserService
@inject ReportService UserlogService

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary"> @mPagecaption </MudText>
    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=Export Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error"></MudIconButton>
        </MudTooltip>
    </MudAppBar>
    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?VarGlobals.TableHeight:"")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Vrpt_shelf_listInfo,bool>(FilterFunc)" @bind-SelectedItem="selectedItem" SortLabel="Sort By">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Shelfcode)">STORAGEBIN</MudTableSortLabel></MudTh>
            @*<MudTh Style="width: 80px;"><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Srm_no)">LANE</MudTableSortLabel></MudTh>*@
            <MudTh Style="width: 80px;"><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Shelfbank)">BANK</MudTableSortLabel></MudTh>
            <MudTh Style="width: 80px;"><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Shelfbay)">BAY</MudTableSortLabel></MudTh>
            <MudTh Style="width: 80px;"><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Shelflevel)">LEVEL</MudTableSortLabel></MudTh>
            <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Lpncode)">PALLET</MudTableSortLabel></MudTh>
            <MudTh Style="width: 190px;"><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.Modified)">UPDATED</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Vrpt_shelf_listInfo, object>(x=>x.St_desc)">STATUS</MudTableSortLabel></MudTh>
            <MudTh>ACTION</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="clm-row-small" DataLabel="STORAGEBIN">@context.Shelfcode</MudTd>
            @*<MudTd Class="clm-row-small" DataLabel="LANE">@context.Srm_no</MudTd>*@
            <MudTd Class="clm-row-small" DataLabel="BANK">@context.Shelfbank</MudTd>
            <MudTd Class="clm-row-small" DataLabel="BAY">@context.Shelfbay</MudTd>
            <MudTd Class="clm-row-small" DataLabel="LEVEL">@context.Shelflevel</MudTd>
            <MudTd Class="clm-row-small" DataLabel="PALLET">@context.Lpncode</MudTd>
            <MudTd Class="clm-row-small" DataLabel="UPDATED">
                @if (context.Modified != null)
                    {
                    @Convert.ToDateTime(context.Modified).ToString(VarGlobals.FormatDT)
                    }
            </MudTd>
            <MudTd Class="clm-row-small" DataLabel="STATUS">
                <MudChip Variant="Variant.Filled" Color="@context.St_Color">@context.St_desc</MudChip>
            </MudTd>
            <MudTd DataLabel="ACTION">

                @if (@context.Shelfstatus == 6)
                    {
                    <MudFab @onclick="@(()=>PickingRack(@context.Lpncode,@context.Shelfcode ))" Color="Color.Secondary" Icon="@Icons.Material.Filled.AddShoppingCart" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab @onclick="@(()=>ClearRack(1, @context.Lpncode,@context.Shelfcode ))" Color="Color.Inherit" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                    }
                    else if (@context.Shelfstatus == 1)
                    {
                    @*<MudFab Color="Color.Error" Icon="@Icons.Material.Filled.Inbox" Size="Size.Small" IconSize="Size.Small" />*@
                    <MudFab @onclick="@(()=>BookkingRack(@context.Lpncode,@context.Shelfcode ))" Color="Color.Warning" Icon="@Icons.Material.Filled.BookmarkAdd" Size="Size.Small" IconSize="Size.Small" />
                    }
                    else if (@context.Shelfstatus == 2 || @context.Shelfstatus == 4)
                    {
                    <MudFab @onclick="@(()=>ClearRack(1, @context.Lpncode,@context.Shelfcode ))" Color="Color.Inherit" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                    }

            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {

    private string stColor = "background-color:yellow;";

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };

    private readonly string mPagecaption = "10.3-Storage Bin";

    private string mPagename { get; set; } = "/10/10_3";
    private string pageheader = "10.3-Storage Bin";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Vrpt_shelf_listInfo selectedItem = null;
    private HashSet<Vrpt_shelf_listInfo> selectedItems = new HashSet<Vrpt_shelf_listInfo>();
    private IEnumerable<Vrpt_shelf_listInfo> Elements = new List<Vrpt_shelf_listInfo>();

    public int elevation = 0;

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";
    List<Userroleinfo> Roles = new List<Userroleinfo>();


    protected override async Task OnInitializedAsync()
    {
        InvService objCS = new InvService();
        //Elements = await Task.Run(() => objCS.GetReceivingOrdersbypallet(mPalletcode));
        Elements = await Task.Run(() => objCS.GetShelfLocationCuRoom());
        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);
    }

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void setstr(string str)
    {
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Vrpt_shelf_listInfo element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Lpncode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Shelfcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        //try
        //{
        //    WhShelfListPageRptExcel excelReport = new WhShelfListPageRptExcel();
        //    List<Vrpt_shelf_listInfo> listExcelReport = new List<Vrpt_shelf_listInfo>();
        //    listExcelReport = Elements.ToList();
        //    var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
        //    await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
        //}
        //catch (Exception e)
        //{
        //    var exmsg = e.Message.ToString();
        //}
    }

    public async Task DownloadPdfDocument()
    {
        //try
        //{
        //    WhShelfListPageRptPdf pdfReport = new WhShelfListPageRptPdf();

        //    List<Vrpt_shelf_listInfo> listPdfReport = new List<Vrpt_shelf_listInfo>();
        //    listPdfReport = Elements.ToList();
        //    var fileName = $"{mPagecaption.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
        //    //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
        //    await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));

        //}
        //catch (Exception e)
        //{
        //    var exmsg = e.Message.ToString();
        //}
    }

    private async Task ClearRack(Int32 iStatus, string sPallet, string sBin)
    {
        await Task.Run(() => ObjService.ClearRack(iStatus, sPallet, sBin));

        this.InsertAuditrial("Claerrack  pallet : " + sPallet + " , Binno : " + sBin, pageheader);

        await RefreshPage();
    }
    private async Task PickingRack(string sPallet, string sBin)
    {
        if (sPallet.Length <= 0)
        {
            sPallet = sBin + "-00000";
        }
        await Task.Run(() => ObjAgvService.CreateAvgworksCuRoom(sPallet, "05", sBin, "CuringRoom#2", 1));

        this.InsertAuditrial("Pick pallet : " + sPallet + " , Binno : " + sBin, pageheader);

        await RefreshPage();
    }
    private async Task BookkingRack(string sPallet, string sBin)
    {
        await Task.Run(() => ObjService.BookkingRack(sPallet, sBin));

        this.InsertAuditrial("Booking pallet : " + sPallet  + " , Binno : " + sBin, pageheader);
        await RefreshPage();

    }

    private async Task RefreshPage()
    {
        Elements = await Task.Run(() => ObjService.GetShelfLocationCuRoom());
        this.StateHasChanged();
    }


    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }


}
