@page "/6/6_7"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Api
@using GoWMS.Server.Models.Mas
@using GoWMS.Server.Models.Erp
@using System.Threading


@inject ErpService ObjErpService
@inject ErpApiService ObjErpApiService
@inject MasService ObjMasService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h6" Color="Color.Primary">@mPageHeader</MudText>

<MudGrid>
    <MudItem xs="12">
        @if (@elevation == 0) //Defult
        {
            <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 1) //Info
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 2) //Success
        {
            <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 3) // Warning
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 4) // Error
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
    </MudItem>

    <MudItem xs="12">
        <div class="form-group">
            <input style="width: 100%; height: 40px" type="text" class="form-control" @bind-value="stringputkey" @onkeyup="@DoTheThing" placeholder="Input scan" />
        </div>
    </MudItem>
</MudGrid>

<br />


@if (Elements == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{

    <MudTable Items="@Elements"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Cylinder,bool>(FilterFunc)"
              @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">PALLET:[@mPalletcode]</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder="Search"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<Cylinder, object>(x=>x.Material)">MAT</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Cylinder, object>(x=>x.Material_Description)">MATERIAL</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Cylinder, object>(x=>x.Previos_Ref)">PREVIOS</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Cylinder, object>(x=>x.Customer_Code)">CUSTOMER</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Cylinder, object>(x=>x.Customer_Description)">CYLINDERREF</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Cylinder, object>(x=>x.Customer_Reference)">CUSTOMERREF</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Cylinder, object>(x=>x.Cylindercode)">CYLINDER</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Cylinder, object>(x=>x.Cylinderbar)">BARCODE</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Cylinder, object>(x=>x.Colorcode)">COLOR</MudTableSortLabel></MudTh>
            <MudTh>ACTION</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="clm-row-small" DataLabel="MAT">@context.Material</MudTd>
            <MudTd Class="clm-row-small" DataLabel="MATERIAL">@context.Material_Description</MudTd>
            <MudTd Class="clm-row-small" DataLabel="PREVIOS">@context.Previos_Ref</MudTd>
            <MudTd Class="clm-row-small" DataLabel="CUSTOMER">@context.Customer_Code</MudTd>
            <MudTd Class="clm-row-small" DataLabel="CYLINDERREF">@context.Customer_Description</MudTd>
            <MudTd Class="clm-row-small" DataLabel="CUSTOMERREF">@context.Customer_Reference</MudTd>
            <MudTd Class="clm-row-small" DataLabel="CYLINDER">@context.Cylindercode</MudTd>
            <MudTd Class="clm-row-small" DataLabel="BARCODE">@context.Cylinderbar</MudTd>
            <MudTd Class="clm-row-small" DataLabel="COLOR">@context.Colorcode</MudTd>
            <MudTd DataLabel="ACTION">
                <MudFab @onclick="@(()=>DeleteMap(@context.Cylindercode, "A", context.Material))" 
                        Color="Color.Secondary" 
                        Icon="@Icons.Material.Filled.Delete" 
                        Size="Size.Small" 
                        IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private string mPageHeader = "6.7-Cylinder";
    private string mPagename { get; set; } = "/6/6_7";
    private string msgAction = "Enter MasterPallet";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = null;
    public string stringput { get; set; } = "";
    public string stringputkey { get; set; } = null;
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString = "";
    private Cylinder selectedItem = null;
    private HashSet<Cylinder> selectedItems = new HashSet<Cylinder>();
    private IEnumerable<Cylinder> Elements = new List<Cylinder>();

    private IEnumerable<Cylinder> MapPalletItem = new List<Cylinder>();

    private IEnumerable<Mas_Pallet_Go> MasterPallets = new List<Mas_Pallet_Go>();

    private List<Cylinder> lstobj = new List<Cylinder>();

    private IEnumerable<Mas_Cylinderlist_Go> PalletItemList = new List<Mas_Cylinderlist_Go>();


    public int elevation = 0;

    public int cOld = 0;
    public int cNew = 0;

    public string StringKeyPressed = "AAA";

    string KeyPressed = "";
    string EventInfo = "";

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            StringKeyPressed = "";
            KeyPressed = "Key Pressed is " + args.Key;
            EventInfo = "Event Type " + args.Type;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //ErpService objCS = new ErpService();
        //cOld = Elements.Count();
        //Elements = await Task.Run(() => objCS.GetAllErpCylindersbytag(mPalletcode));
        //cNew = Elements.Count();
        //lstobj.Clear();

    }

    async Task setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            Boolean bValidate = false;
            bValidate = ObjMasService.ValidateMasterpallet(str.ToUpper());

            if (bValidate)
            {
                mPalletcode = str.ToUpper();
                msgAction = "Enter Cylinder";
                elevation = 1;
                Snackbar.Add("Enter Cylinder", Severity.Normal);

                lstobj.Clear();

                PalletItemList = ObjMasService.GetAllCylinderListGoByPallet(mPalletcode);

                if (PalletItemList.ToList().Count>0)
                {
                    foreach (var s in PalletItemList)
                    {
                        Cylinder objrd = new Cylinder
                        {
                            Material = s.Material_Code,
                            Material_Description = s.Material_Description,
                            Customer_Code = s.Customer_Code,
                            Customer_Description = s.Customer_Description,
                            Customer_Reference = s.Customer_Reference,
                            Previos_Ref = s.Previos_ref,
                            Colorcode = s.Colorcode,
                            Cylindercode = s.Cylindercode,
                            Cylinderbar = s.Cylinderbar,
                            Cylindeno = s.Cylinderno,
                            IState = 0,
                            Palletcode = mPalletcode
                        };
                        lstobj.Add(objrd);
                    }
                    Elements = lstobj.ToList();
                }
            }
            else
            {
                mPalletcode = "";
                elevation = 4;
                msgAction = "Masterpallet find not found";
                Snackbar.Add("Masterpallet find not found", Severity.Warning);
            }
        }
        else
        {
            if (str.ToUpper() == mPalletcode)
            {
                if (Elements.ToList().Count > 0)
                {
                    elevation = 2;
                    msgAction = "Mapping successfully";

                    string msgret = await Task.Run(() => ObjMasService.InsertCylinderListMaster(lstobj.ToList(), mPalletcode));


                    ObjErpApiService.SetMappedPalletCylinder(mPalletcode);

                    mPalletcode = "";
                    lstobj.Clear();
                    Elements = lstobj.ToList();
                    Snackbar.Add(msgret, Severity.Info);
                }
                else
                {
                    elevation = 3;
                    msgAction = "Please enter Cylinder";
                    Snackbar.Add("Please enter Cylinder", Severity.Info);
                }
            }
            else
            {
                mPackid = str;

                bool exists = lstobj.Where(w => w.Cylinderbar.Contains(mPackid)).Any();
                if (exists==false)
                {
                    MapPalletItem = null;
                    MapPalletItem = ObjErpService.GetAllErpCylindersbytag(mPackid);

                    if (MapPalletItem.ToList().Count > 0)
                    {
                        foreach (var s in MapPalletItem)
                        {
                            Cylinder objrd = new Cylinder
                            {
                                Material = s.Material,
                                Material_Description = s.Material_Description,
                                Customer_Code = s.Customer_Code,
                                Customer_Description = s.Customer_Description,
                                Customer_Reference = s.Customer_Reference,
                                Previos_Ref = s.Previos_Ref,
                                Colorcode = s.Colorcode,
                                Cylindercode = s.Cylindercode,
                                Cylinderbar = s.Cylinderbar,
                                Cylindeno = s.Cylindeno,
                                IState = 0,
                                Palletcode = mPalletcode
                            };
                            lstobj.Add(objrd);

                        }
                        msgAction = "Enter Cylinder or Pallet code for complete";
                        elevation = 1;
                        Snackbar.Add("Enter Cylinder or Pallet code for complete", Severity.Info);
                    }
                    else
                    {
                        elevation = 3;
                        msgAction = "Find not found Cylinder please enter again";
                        Snackbar.Add("Find not found Cylinder please enter again", Severity.Error);
                    }
                }

                Elements = lstobj.ToList();
            }
        }

    }

    private string stxtInput { get; set; }

    async Task DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {

            string pallettemp = stringputkey;

            await Task.Run(() => setstr(pallettemp));

            this.stringputkey = null;
            this.mPackid = null;
            cOld = Elements.Count();

            //Elements = await Task.Run(() => ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode));

            cNew = Elements.Count();

            if (cOld == cNew)
            {
                // Elements = await Task.Run(() => ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode));
            }
            else
            {
                if (mPalletcode.Length > 0)
                {
                    //Elements = await Task.Run(() => ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode));
                }
            }
            this.StateHasChanged();
        }

    }

    private bool FilterFunc(Cylinder element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Material.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Cylindercode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Cylinderbar.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Previos_Ref.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Material_Description} {element.Customer_Code} {element.Customer_Description}".Contains(searchString))
            return true;
        return false;
    }

    private void DeleteMap(string pack, string pallet, string matcode)
    {
        msgAction = "Cancle successfully";

        var itemToRemove = lstobj.Single(r => r.Cylindercode == pack && r.Material == matcode);
        lstobj.Remove(itemToRemove);

        //ObjErpApiService.CancelReceivingOrderbypack(mPalletcode, pack);

        // cOld = Elements.Count();
        // Elements = ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode);
        // cNew = Elements.Count();

        Elements = lstobj.ToList();

    }

    async Task Reset()
    {
        this.stringputkey = null;
        this.mPackid = null;

        cOld = Elements.Count();

        //  Elements = ObjErpApiService.GetAllApiRecevingorderGosypallet(mPalletcode);

        cNew = Elements.Count();

        StateHasChanged();
    }
}
